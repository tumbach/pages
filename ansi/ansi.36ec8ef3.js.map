{"mappings":"ACAA,SAAS,gBAAgB,CAAC,OAAO,OAAO,CAAC,AAAA,GAAQ,EAAK,KAAK,CAAC,OAAO,CAAG,WAEtE,IAAM,MAAQ,SAAS,aAAa,CAAC,UAAY,IAAI,MACjD,OAAQ,QAAS,SAAU,SAC7B,UAAW,QAAS,aAAc,OAClC,OAAS,SAAS,cAAc,CAAC,WACjC,UAAY,SAAS,cAAc,CAAC,QAClC,QAAU,EAQd,SAAS,UAAU,CAAK,EACrB,EAAM,MAAM,CAAI,EAAM,IAAI,GAAK,EAAM,KAAK,EAC7C,CAGA,SAAS,KAAK,CAAI,EAKhB,GAJI,MAAM,KAAK,EACb,CAAA,MAAM,KAAK,CAAG,CAAA,CADhB,EAGA,UAAU,OACN,AAAmB,KAAA,IAAZ,QAAyB,CAClC,GAAI,CACF,OAAO,YAAY,CAAG,OAAO,YAAY,EAAI,OAAO,kBAAkB,CACtE,QAAU,IAAI,YAChB,CAAE,MAAO,EAAG,CACV,MAAO,CAAA,CACT,CACA,OAAS,QAAQ,wBAAwB,CAAC,OAC1C,SAAW,QAAQ,cAAc,GACjC,SAAW,QAAQ,UAAU,GAE7B,SAAS,WAAW,CAAG,IACvB,SAAS,WAAW,CAAG,IACvB,SAAS,OAAO,CAAG,IAGnB,UAAY,IAAI,WADhB,aAAe,SAAS,iBAAiB,EAEzC,OAAS,KAAK,KAAK,CAAC,AAAe,GAAf,cAEpB,OAAO,OAAO,CAAC,UACf,SAAS,OAAO,CAAC,UACjB,SAAS,OAAO,CAAC,QAAQ,WAAW,EACpC,MACF,CACA,SAAS,IAAI,CAAC,KAAK,CAAG,EAAA,CACxB,CAzCA,OAAO,qBAAqB,CACnB,OAAO,qBAAqB,EACjC,SAAS,CAAQ,EACf,OAAO,UAAU,CAAC,EAAU,IAAO,GACrC,EAKJ,OAAO,gBAAgB,CAAC,QAAS,IAAM,KAAK,IAC5C,OAAO,gBAAgB,CAAC,aAAc,IAAM,KAAK,IAiCjD,IAAI,MAAS,OAAO,UAAU,CAC1B,OAAS,OAAO,WAAW,AAE/B,CADA,CAAA,OAAS,SAAS,cAAc,CAAC,SAAjC,EACO,KAAK,CAAG,MAAO,OAAO,MAAM,CAAG,OACtC,UAAY,OAAO,UAAU,CAAC,MAC9B,IAAI,MAAQ,CAAE,KAAS,UAAW,GAAO,SAAS,EAElD,AADA,CAAA,YAAc,UAAU,oBAAoB,CAAC,EAAE,EAAE,EAAE,OAAnD,EACY,YAAY,CAAC,EAAG,MAAM,IAAI,EACtC,YAAY,YAAY,CAAC,EAAG,MAAM,EAAE,EACpC,IAAI,WAAa,EAEjB,SAAS,OACP,SAAS,oBAAoB,CAAC,WAC9B,IAAI,EAAQ,SAAS,CAAC,QAAQ,CAAG,QAC7B,EAAgB,SAAS,CAAC,QAAQ,CAAG,GACrC,CAAA,WAAa,EACf,WAAa,EAAiB,EAAQ,IAC7B,WAAa,GACtB,CAAA,YAAc,IADT,EAGP,UAAU,KAAK,CAAC,OAAO,CAAG,WAC1B,WAAW,EAAO,YAClB,QAAU,SAAS,CAAC,QAAQ,CAC5B,sBAAsB,KACxB,CAEA,SAAS,WAAW,CAAK,CAAE,CAAU,MAI/B,EAHJ,UAAU,SAAS,CAAC,EAAG,EAAG,MAAO,QAEjC,IAAI,EAAW,KAAK,IAAI,CAAC,MAAQ,QAE7B,EAAI,EAER,IAAK,IAAI,EAAI,EAAG,EAAI,OAAQ,IAC1B,EAAc,OAAS,SAAS,CAAC,EAAE,CAAI,IAEvC,UAAU,SAAS,CAAG,YACtB,UAAU,QAAQ,CAAC,EAAG,OAAS,EAAW,EAAU,GAEpD,GAAK,EAAW,CAElB,CAAA,UAAU,SAAS,CAAG,MACtB,UAAU,QAAQ,CAAE,AAAA,CAAA,EAAW,CAAA,EAAK,QAAS,OAAU,CAAA,EAAI,CAAA,EAAa,EAAU,EACpF","sources":["<anon>","src/ansi/index.js"],"sourcesContent":["document.querySelectorAll(\".js\").forEach((item)=>item.style.display = \"initial\");\nconst audio = document.querySelector(\"audio\") || new Audio();\nlet source, context, analyser, gainNode, dataArray, dataOld, bufferLength, blhalf, button = document.getElementById(\"trigger\"), container = document.getElementById(\"logo\");\nlet barItem = 3;\nwindow.requestAnimationFrame = function() {\n    return window.requestAnimationFrame || function(callback) {\n        window.setTimeout(callback, 1000 / 30);\n    };\n}();\nfunction resetSong(audio) {\n    audio.paused ? audio.play() : audio.pause();\n}\nbutton.addEventListener(\"click\", ()=>play(0));\nbutton.addEventListener(\"touchstart\", ()=>play(0));\nfunction play(mute) {\n    if (audio.muted) audio.muted = false;\n    resetSong(audio);\n    if (typeof dataOld === \"undefined\") {\n        try {\n            window.AudioContext = window.AudioContext || window.webkitAudioContext;\n            context = new AudioContext();\n        } catch (e) {\n            return false;\n        }\n        source = context.createMediaElementSource(audio);\n        analyser = context.createAnalyser();\n        gainNode = context.createGain();\n        analyser.minDecibels = -64;\n        analyser.maxDecibels = -32;\n        analyser.fftSize = 512;\n        bufferLength = analyser.frequencyBinCount;\n        dataArray = new Uint8Array(bufferLength);\n        blhalf = Math.floor(bufferLength * 0.5);\n        source.connect(analyser);\n        analyser.connect(gainNode);\n        gainNode.connect(context.destination);\n        draw();\n    }\n    gainNode.gain.value = mute ? 0 : 1;\n}\nlet WIDTH = window.innerWidth;\nlet HEIGHT = window.innerHeight;\ncanvas = document.getElementById('yaebal');\ncanvas.width = WIDTH;\ncanvas.height = HEIGHT;\ncanvasCtx = canvas.getContext('2d');\nlet color = {\n    'from': '#24c6fb',\n    'to': '#2CC932'\n};\nbarGradient = canvasCtx.createLinearGradient(0, 0, 0, HEIGHT);\nbarGradient.addColorStop(0, color.from);\nbarGradient.addColorStop(1, color.to);\nlet drumVolume = 0;\nfunction draw() {\n    analyser.getByteFrequencyData(dataArray);\n    let delta = dataArray[barItem] - dataOld;\n    let currentVolume = dataArray[barItem] / 255;\n    if (drumVolume < currentVolume) drumVolume = currentVolume + delta / 255;\n    else if (drumVolume > 0) drumVolume -= 0.005;\n    container.style.opacity = drumVolume;\n    drawCanvas(delta, drumVolume);\n    dataOld = dataArray[barItem];\n    requestAnimationFrame(draw);\n}\nfunction drawCanvas(delta, drumVolume) {\n    canvasCtx.clearRect(0, 0, WIDTH, HEIGHT);\n    let barWidth = Math.ceil(WIDTH / blhalf);\n    let barHeight;\n    let x = 0;\n    for(let i = 0; i < blhalf; i++){\n        barHeight = HEIGHT * dataArray[i] / 255;\n        canvasCtx.fillStyle = barGradient;\n        canvasCtx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n        x += barWidth + 1;\n    }\n    canvasCtx.fillStyle = \"red\";\n    canvasCtx.fillRect((barWidth + 1) * barItem, HEIGHT * (1 - drumVolume), barWidth, 5);\n}\n\n//# sourceMappingURL=ansi.36ec8ef3.js.map\n","document.querySelectorAll(\".js\").forEach(item => item.style.display = \"initial\");\n\nconst audio = document.querySelector(\"audio\") || new Audio();\nlet source, context, analyser, gainNode,\n  dataArray, dataOld, bufferLength, blhalf,\n  button = document.getElementById(\"trigger\"),\n  container = document.getElementById(\"logo\");\nlet barItem = 3;\n\nwindow.requestAnimationFrame = (function(){\n  return window.requestAnimationFrame ||\n    function(callback){\n      window.setTimeout(callback, 1000 / 30);\n    };\n})();\nfunction resetSong(audio) {\n  (audio.paused) ? audio.play() : audio.pause();\n}\nbutton.addEventListener(\"click\", () => play(0));\nbutton.addEventListener(\"touchstart\", () => play(0));\nfunction play(mute) {\n  if (audio.muted) {\n    audio.muted = false;\n  }\n  resetSong(audio);\n  if (typeof dataOld === \"undefined\") { // means `inited`\n    try {\n      window.AudioContext = window.AudioContext || window.webkitAudioContext;\n      context = new AudioContext();\n    } catch (e) {\n      return false;\n    }\n    source = context.createMediaElementSource(audio);\n    analyser = context.createAnalyser();\n    gainNode = context.createGain();\n\n    analyser.minDecibels = -64;\n    analyser.maxDecibels = -32;\n    analyser.fftSize = 512;\n\n    bufferLength = analyser.frequencyBinCount;\n    dataArray = new Uint8Array(bufferLength);\n    blhalf = Math.floor(bufferLength * 0.5);\n\n    source.connect(analyser);\n    analyser.connect(gainNode);\n    gainNode.connect(context.destination);\n    draw();\n  }\n  gainNode.gain.value = mute ? 0 : 1;\n}\n\nlet WIDTH  = window.innerWidth;\nlet HEIGHT = window.innerHeight;\ncanvas = document.getElementById('yaebal');\ncanvas.width = WIDTH; canvas.height = HEIGHT;\ncanvasCtx = canvas.getContext('2d');\nlet color = { 'from' : '#24c6fb', 'to' : '#2CC932'};\nbarGradient = canvasCtx.createLinearGradient(0,0,0,HEIGHT);\nbarGradient.addColorStop(0, color.from);\nbarGradient.addColorStop(1, color.to);\nlet drumVolume = 0;\n\nfunction draw() {\n  analyser.getByteFrequencyData(dataArray);\n  let delta = dataArray[barItem] - dataOld;\n  let currentVolume = dataArray[barItem] / 255;\n  if (drumVolume < currentVolume) {\n    drumVolume = currentVolume + (delta / 255);\n  } else if (drumVolume > 0) {\n    drumVolume -= 0.005;\n  }\n  container.style.opacity = drumVolume;\n  drawCanvas(delta, drumVolume);\n  dataOld = dataArray[barItem];\n  requestAnimationFrame(draw);\n}\n\nfunction drawCanvas(delta, drumVolume) {\n  canvasCtx.clearRect(0, 0, WIDTH, HEIGHT);\n\n  let barWidth = Math.ceil(WIDTH / blhalf);\n  let barHeight;\n  let x = 0;\n\n  for (let i = 0; i < blhalf; i++) {\n    barHeight = ((HEIGHT * dataArray[i]) / 255);\n\n    canvasCtx.fillStyle = barGradient;\n    canvasCtx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n\n    x += barWidth + 1;\n  }\n  canvasCtx.fillStyle = \"red\";\n  canvasCtx.fillRect((barWidth + 1) * barItem, HEIGHT * (1 - drumVolume), barWidth, 5);\n}\n"],"names":["document","querySelectorAll","forEach","item","style","display","audio","querySelector","Audio","source","context","analyser","gainNode","dataArray","dataOld","bufferLength","blhalf","button","getElementById","container","barItem","resetSong","paused","play","pause","mute","muted","window","AudioContext","webkitAudioContext","e","createMediaElementSource","createAnalyser","createGain","minDecibels","maxDecibels","fftSize","Uint8Array","frequencyBinCount","Math","floor","connect","destination","draw","gain","value","requestAnimationFrame","callback","setTimeout","addEventListener","WIDTH","innerWidth","HEIGHT","innerHeight","canvas","width","height","canvasCtx","getContext","color","barGradient","createLinearGradient","addColorStop","from","to","drumVolume","getByteFrequencyData","delta","currentVolume","opacity","drawCanvas","barHeight","clearRect","barWidth","ceil","x","i","fillStyle","fillRect"],"version":3,"file":"ansi.36ec8ef3.js.map"}