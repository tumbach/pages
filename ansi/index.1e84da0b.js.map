{"mappings":"ACAA,SAAS,gBAAA,CAAiB,OAAO,OAAA,CAAQ,AAAA,GAAQ,EAAK,KAAA,CAAM,OAAA,CAAU,WAEtE,MAAM,EAAQ,SAAS,aAAA,CAAc,UAAY,IAAI,MACrD,IAAI,EAAQ,EAAS,EAAU,EAC7B,EAAW,EAAS,EAAc,EAClC,EAAS,SAAS,cAAA,CAAe,WACjC,EAAY,SAAS,cAAA,CAAe,QActC,SAAS,EAAK,CAAI,EAKhB,GAJI,EAAM,KAAA,EACR,CAAA,EAAM,KAAA,CAAQ,CAAA,CADhB,EALC,AAQS,EARH,MAAA,CAAU,AAQP,EARa,IAAA,GAAS,AAQtB,EAR4B,KAArC,GASG,AAAmB,KAAA,IAAZ,EAAyB,CAClC,GAAI,CACF,OAAO,YAAA,CAAe,OAAO,YAAA,EAAgB,OAAO,kBAApD,CACA,EAAU,IAAI,YAChB,CAAE,MAAO,EAAG,CACV,MAAO,CAAA,CACT,CACA,EAAS,EAAQ,wBAAA,CAAyB,GAC1C,EAAW,EAAQ,cAAnB,GACA,EAAW,EAAQ,UAAnB,GAEA,EAAS,WAAA,CAAc,IACvB,EAAS,WAAA,CAAc,IACvB,EAAS,OAAA,CAAU,IAEnB,EAAe,EAAS,iBAAxB,CACA,EAAY,IAAI,WAAW,GAC3B,EAAS,KAAK,KAAA,CAAM,AAAe,GAAf,GAEpB,EAAO,OAAA,CAAQ,GACf,EAAS,OAAA,CAAQ,GACjB,EAAS,OAAA,CAAQ,EAAQ,WAAzB,EACA,AAgBJ,SAAS,IACP,EAAS,oBAAA,CAAqB,GAC9B,IAAI,EAAQ,CAAS,CA1DT,EA0DkB,CAAG,EAC7B,EAAgB,CAAS,CA3DjB,EA2D0B,CAAG,GACrC,CAAA,EAAa,EACf,EAAa,EAAiB,EAAQ,IAC7B,EAAa,GACtB,CAAA,GAAc,IADT,EAGP,EAAU,KAAA,CAAM,OAAA,CAAU,EAC1B,AAKF,SAAoB,CAAK,CAAE,CAAU,MAI/B,EAHJ,UAAU,SAAA,CAAU,EAAG,EAAG,EAAO,GAEjC,IAAI,EAAW,KAAK,IAAA,CAAK,EAAQ,GAE7B,EAAI,EAER,IAAK,IAAI,EAAI,EAAG,EAAI,EAAQ,IAC1B,EAAc,EAAS,CAAS,CAAC,EAAE,CAAI,IAEvC,UAAU,SAAA,CAAY,YACtB,UAAU,QAAA,CAAS,EAAG,EAAS,EAAW,EAAU,GAEpD,GAAK,EAAW,CAElB,CAAA,UAAU,SAAA,CAAY,MACtB,UAAU,QAAA,CAAU,AAAA,CAAA,EAAW,CAAA,EAvFnB,EAuFiC,EAAU,CAAA,EAAI,CAAA,EAAa,EAAU,EACpF,EAtBa,EAAO,GAClB,EAAU,CAAS,CAnEP,EAmEgB,CAC5B,sBAAsB,EACxB,GA5BE,CACA,EAAS,IAAA,CAAK,KAAA,CAAQ,EAAO,EAAI,CACnC,CAzCA,OAAO,qBAAA,CACE,OAAO,qBAAA,EACZ,SAAS,CAAQ,EACf,OAAO,UAAA,CAAW,EAAU,IAAO,GACrC,EAKJ,EAAO,gBAAA,CAAiB,QAAS,IAAM,EAAK,IAC5C,EAAO,gBAAA,CAAiB,aAAc,IAAM,EAAK,IAiCjD,IAAI,EAAS,OAAO,UAApB,CACI,EAAS,OAAO,WAApB,AAEA,CADA,CAAA,OAAS,SAAS,cAAA,CAAe,SAAjC,EACO,KAAA,CAAQ,EAAO,OAAO,MAAA,CAAS,EAEtC,IAAI,EAAQ,CAAE,KAAS,UAAW,GAAO,SAAS,EAElD,AADA,CAAA,YAAc,AAFd,CAAA,UAAY,OAAO,UAAA,CAAW,KAA9B,EAEwB,oBAAA,CAAqB,EAAE,EAAE,EAAE,EAAnD,EACY,YAAA,CAAa,EAAG,EAAM,IAAlC,EACA,YAAY,YAAA,CAAa,EAAG,EAAM,EAAlC,EACA,IAAI,EAAa","sources":["<anon>","ansi/index.js"],"sourcesContent":["document.querySelectorAll(\".js\").forEach((item)=>item.style.display = \"initial\");\nconst audio = document.querySelector(\"audio\") || new Audio();\nlet source, context, analyser, gainNode, dataArray, dataOld, bufferLength, blhalf, button = document.getElementById(\"trigger\"), container = document.getElementById(\"logo\");\nlet barItem = 3;\nwindow.requestAnimationFrame = function() {\n    return window.requestAnimationFrame || function(callback) {\n        window.setTimeout(callback, 1000 / 30);\n    };\n}();\nfunction resetSong(audio) {\n    audio.paused ? audio.play() : audio.pause();\n}\nbutton.addEventListener(\"click\", ()=>play(0));\nbutton.addEventListener(\"touchstart\", ()=>play(0));\nfunction play(mute) {\n    if (audio.muted) audio.muted = false;\n    resetSong(audio);\n    if (typeof dataOld === \"undefined\") {\n        try {\n            window.AudioContext = window.AudioContext || window.webkitAudioContext;\n            context = new AudioContext();\n        } catch (e) {\n            return false;\n        }\n        source = context.createMediaElementSource(audio);\n        analyser = context.createAnalyser();\n        gainNode = context.createGain();\n        analyser.minDecibels = -64;\n        analyser.maxDecibels = -32;\n        analyser.fftSize = 512;\n        bufferLength = analyser.frequencyBinCount;\n        dataArray = new Uint8Array(bufferLength);\n        blhalf = Math.floor(bufferLength * 0.5);\n        source.connect(analyser);\n        analyser.connect(gainNode);\n        gainNode.connect(context.destination);\n        draw();\n    }\n    gainNode.gain.value = mute ? 0 : 1;\n}\nlet WIDTH = window.innerWidth;\nlet HEIGHT = window.innerHeight;\ncanvas = document.getElementById(\"yaebal\");\ncanvas.width = WIDTH;\ncanvas.height = HEIGHT;\ncanvasCtx = canvas.getContext(\"2d\");\nlet color = {\n    \"from\": \"#24c6fb\",\n    \"to\": \"#2CC932\"\n};\nbarGradient = canvasCtx.createLinearGradient(0, 0, 0, HEIGHT);\nbarGradient.addColorStop(0, color.from);\nbarGradient.addColorStop(1, color.to);\nlet drumVolume = 0;\nfunction draw() {\n    analyser.getByteFrequencyData(dataArray);\n    let delta = dataArray[barItem] - dataOld;\n    let currentVolume = dataArray[barItem] / 255;\n    if (drumVolume < currentVolume) drumVolume = currentVolume + delta / 255;\n    else if (drumVolume > 0) drumVolume -= 0.005;\n    container.style.opacity = drumVolume;\n    drawCanvas(delta, drumVolume);\n    dataOld = dataArray[barItem];\n    requestAnimationFrame(draw);\n}\nfunction drawCanvas(delta, drumVolume) {\n    canvasCtx.clearRect(0, 0, WIDTH, HEIGHT);\n    let barWidth = Math.ceil(WIDTH / blhalf);\n    let barHeight;\n    let x = 0;\n    for(let i = 0; i < blhalf; i++){\n        barHeight = HEIGHT * dataArray[i] / 255;\n        canvasCtx.fillStyle = barGradient;\n        canvasCtx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n        x += barWidth + 1;\n    }\n    canvasCtx.fillStyle = \"red\";\n    canvasCtx.fillRect((barWidth + 1) * barItem, HEIGHT * (1 - drumVolume), barWidth, 5);\n}\n\n//# sourceMappingURL=index.1e84da0b.js.map\n","document.querySelectorAll(\".js\").forEach(item => item.style.display = \"initial\");\n\nconst audio = document.querySelector(\"audio\") || new Audio();\nlet source, context, analyser, gainNode,\n  dataArray, dataOld, bufferLength, blhalf,\n  button = document.getElementById(\"trigger\"),\n  container = document.getElementById(\"logo\");\nlet barItem = 3;\n\nwindow.requestAnimationFrame = (function(){\n  return window.requestAnimationFrame ||\n    function(callback){\n      window.setTimeout(callback, 1000 / 30);\n    };\n})();\nfunction resetSong(audio) {\n  (audio.paused) ? audio.play() : audio.pause();\n}\nbutton.addEventListener(\"click\", () => play(0));\nbutton.addEventListener(\"touchstart\", () => play(0));\nfunction play(mute) {\n  if (audio.muted) {\n    audio.muted = false;\n  }\n  resetSong(audio);\n  if (typeof dataOld === \"undefined\") { // means `inited`\n    try {\n      window.AudioContext = window.AudioContext || window.webkitAudioContext;\n      context = new AudioContext();\n    } catch (e) {\n      return false;\n    }\n    source = context.createMediaElementSource(audio);\n    analyser = context.createAnalyser();\n    gainNode = context.createGain();\n\n    analyser.minDecibels = -64;\n    analyser.maxDecibels = -32;\n    analyser.fftSize = 512;\n\n    bufferLength = analyser.frequencyBinCount;\n    dataArray = new Uint8Array(bufferLength);\n    blhalf = Math.floor(bufferLength * 0.5);\n\n    source.connect(analyser);\n    analyser.connect(gainNode);\n    gainNode.connect(context.destination);\n    draw();\n  }\n  gainNode.gain.value = mute ? 0 : 1;\n}\n\nlet WIDTH  = window.innerWidth;\nlet HEIGHT = window.innerHeight;\ncanvas = document.getElementById('yaebal');\ncanvas.width = WIDTH; canvas.height = HEIGHT;\ncanvasCtx = canvas.getContext('2d');\nlet color = { 'from' : '#24c6fb', 'to' : '#2CC932'};\nbarGradient = canvasCtx.createLinearGradient(0,0,0,HEIGHT);\nbarGradient.addColorStop(0, color.from);\nbarGradient.addColorStop(1, color.to);\nlet drumVolume = 0;\n\nfunction draw() {\n  analyser.getByteFrequencyData(dataArray);\n  let delta = dataArray[barItem] - dataOld;\n  let currentVolume = dataArray[barItem] / 255;\n  if (drumVolume < currentVolume) {\n    drumVolume = currentVolume + (delta / 255);\n  } else if (drumVolume > 0) {\n    drumVolume -= 0.005;\n  }\n  container.style.opacity = drumVolume;\n  drawCanvas(delta, drumVolume);\n  dataOld = dataArray[barItem];\n  requestAnimationFrame(draw);\n}\n\nfunction drawCanvas(delta, drumVolume) {\n  canvasCtx.clearRect(0, 0, WIDTH, HEIGHT);\n\n  let barWidth = Math.ceil(WIDTH / blhalf);\n  let barHeight;\n  let x = 0;\n\n  for (let i = 0; i < blhalf; i++) {\n    barHeight = ((HEIGHT * dataArray[i]) / 255);\n\n    canvasCtx.fillStyle = barGradient;\n    canvasCtx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n\n    x += barWidth + 1;\n  }\n  canvasCtx.fillStyle = \"red\";\n  canvasCtx.fillRect((barWidth + 1) * barItem, HEIGHT * (1 - drumVolume), barWidth, 5);\n}\n"],"names":["document","querySelectorAll","forEach","item","style","display","audio","querySelector","Audio","source","context","analyser","gainNode","dataArray","dataOld","bufferLength","blhalf","button","getElementById","container","play","mute","muted","paused","pause","window","AudioContext","webkitAudioContext","e","createMediaElementSource","createAnalyser","createGain","minDecibels","maxDecibels","fftSize","frequencyBinCount","Uint8Array","Math","floor","connect","destination","draw","getByteFrequencyData","delta","currentVolume","drumVolume","opacity","drawCanvas","barHeight","canvasCtx","clearRect","WIDTH","HEIGHT","barWidth","ceil","x","i","fillStyle","barGradient","fillRect","requestAnimationFrame","gain","value","callback","setTimeout","addEventListener","innerWidth","innerHeight","canvas","width","height","color","getContext","createLinearGradient","addColorStop","from","to"],"version":3,"file":"index.1e84da0b.js.map"}