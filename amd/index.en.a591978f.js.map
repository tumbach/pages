{"mappings":"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","sources":["<anon>","node_modules/.pnpm/tinycolor2@1.6.0/node_modules/tinycolor2/cjs/tinycolor.js","amd/js/index.js","amd/js/visualizer.js","node_modules/.pnpm/tinygradient@1.1.5/node_modules/tinygradient/browser.js","node_modules/.pnpm/tinygradient@1.1.5/node_modules/tinygradient/index.js"],"sourcesContent":["(function () {\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired050\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired050\"] = parcelRequire;\n}\nparcelRequire.register(\"1g88j\", function(module, exports) {\n// This file is autogenerated. It's used to publish CJS to npm.\n(function(global, factory) {\n    module.exports = factory();\n})(module.exports, function() {\n    \"use strict\";\n    function _typeof(obj) {\n        \"@babel/helpers - typeof\";\n        return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n            return typeof obj;\n        } : function(obj) {\n            return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        }, _typeof(obj);\n    }\n    // https://github.com/bgrins/TinyColor\n    // Brian Grinstead, MIT License\n    var trimLeft = /^\\s+/;\n    var trimRight = /\\s+$/;\n    function tinycolor(color, opts) {\n        color = color ? color : \"\";\n        opts = opts || {};\n        // If input is already a tinycolor, return itself\n        if (color instanceof tinycolor) return color;\n        // If we are called as a function, call using new instead\n        if (!(this instanceof tinycolor)) return new tinycolor(color, opts);\n        var rgb = inputToRGB(color);\n        this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;\n        this._gradientType = opts.gradientType;\n        // Don't let the range of [0,255] come back in [0,1].\n        // Potentially lose a little bit of precision here, but will fix issues where\n        // .5 gets interpreted as half of the total, instead of half of 1\n        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n        if (this._r < 1) this._r = Math.round(this._r);\n        if (this._g < 1) this._g = Math.round(this._g);\n        if (this._b < 1) this._b = Math.round(this._b);\n        this._ok = rgb.ok;\n    }\n    tinycolor.prototype = {\n        isDark: function isDark() {\n            return this.getBrightness() < 128;\n        },\n        isLight: function isLight() {\n            return !this.isDark();\n        },\n        isValid: function isValid() {\n            return this._ok;\n        },\n        getOriginalInput: function getOriginalInput() {\n            return this._originalInput;\n        },\n        getFormat: function getFormat() {\n            return this._format;\n        },\n        getAlpha: function getAlpha() {\n            return this._a;\n        },\n        getBrightness: function getBrightness() {\n            //http://www.w3.org/TR/AERT#color-contrast\n            var rgb = this.toRgb();\n            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n        },\n        getLuminance: function getLuminance() {\n            //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n            var rgb = this.toRgb();\n            var RsRGB, GsRGB, BsRGB, R, G, B;\n            RsRGB = rgb.r / 255;\n            GsRGB = rgb.g / 255;\n            BsRGB = rgb.b / 255;\n            if (RsRGB <= 0.03928) R = RsRGB / 12.92;\n            else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n            if (GsRGB <= 0.03928) G = GsRGB / 12.92;\n            else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n            if (BsRGB <= 0.03928) B = BsRGB / 12.92;\n            else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n            return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n        },\n        setAlpha: function setAlpha(value) {\n            this._a = boundAlpha(value);\n            this._roundA = Math.round(100 * this._a) / 100;\n            return this;\n        },\n        toHsv: function toHsv() {\n            var hsv = rgbToHsv(this._r, this._g, this._b);\n            return {\n                h: hsv.h * 360,\n                s: hsv.s,\n                v: hsv.v,\n                a: this._a\n            };\n        },\n        toHsvString: function toHsvString() {\n            var hsv = rgbToHsv(this._r, this._g, this._b);\n            var h = Math.round(hsv.h * 360), s = Math.round(hsv.s * 100), v = Math.round(hsv.v * 100);\n            return this._a == 1 ? \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\" : \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + this._roundA + \")\";\n        },\n        toHsl: function toHsl() {\n            var hsl = rgbToHsl(this._r, this._g, this._b);\n            return {\n                h: hsl.h * 360,\n                s: hsl.s,\n                l: hsl.l,\n                a: this._a\n            };\n        },\n        toHslString: function toHslString() {\n            var hsl = rgbToHsl(this._r, this._g, this._b);\n            var h = Math.round(hsl.h * 360), s = Math.round(hsl.s * 100), l = Math.round(hsl.l * 100);\n            return this._a == 1 ? \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\" : \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + this._roundA + \")\";\n        },\n        toHex: function toHex(allow3Char) {\n            return rgbToHex(this._r, this._g, this._b, allow3Char);\n        },\n        toHexString: function toHexString(allow3Char) {\n            return \"#\" + this.toHex(allow3Char);\n        },\n        toHex8: function toHex8(allow4Char) {\n            return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n        },\n        toHex8String: function toHex8String(allow4Char) {\n            return \"#\" + this.toHex8(allow4Char);\n        },\n        toRgb: function toRgb() {\n            return {\n                r: Math.round(this._r),\n                g: Math.round(this._g),\n                b: Math.round(this._b),\n                a: this._a\n            };\n        },\n        toRgbString: function toRgbString() {\n            return this._a == 1 ? \"rgb(\" + Math.round(this._r) + \", \" + Math.round(this._g) + \", \" + Math.round(this._b) + \")\" : \"rgba(\" + Math.round(this._r) + \", \" + Math.round(this._g) + \", \" + Math.round(this._b) + \", \" + this._roundA + \")\";\n        },\n        toPercentageRgb: function toPercentageRgb() {\n            return {\n                r: Math.round(bound01(this._r, 255) * 100) + \"%\",\n                g: Math.round(bound01(this._g, 255) * 100) + \"%\",\n                b: Math.round(bound01(this._b, 255) * 100) + \"%\",\n                a: this._a\n            };\n        },\n        toPercentageRgbString: function toPercentageRgbString() {\n            return this._a == 1 ? \"rgb(\" + Math.round(bound01(this._r, 255) * 100) + \"%, \" + Math.round(bound01(this._g, 255) * 100) + \"%, \" + Math.round(bound01(this._b, 255) * 100) + \"%)\" : \"rgba(\" + Math.round(bound01(this._r, 255) * 100) + \"%, \" + Math.round(bound01(this._g, 255) * 100) + \"%, \" + Math.round(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n        },\n        toName: function toName() {\n            if (this._a === 0) return \"transparent\";\n            if (this._a < 1) return false;\n            return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n        },\n        toFilter: function toFilter(secondColor) {\n            var hex8String = \"#\" + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n            var secondHex8String = hex8String;\n            var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n            if (secondColor) {\n                var s = tinycolor(secondColor);\n                secondHex8String = \"#\" + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n            }\n            return \"progid:DXImageTransform.Microsoft.gradient(\" + gradientType + \"startColorstr=\" + hex8String + \",endColorstr=\" + secondHex8String + \")\";\n        },\n        toString: function toString(format) {\n            var formatSet = !!format;\n            format = format || this._format;\n            var formattedString = false;\n            var hasAlpha = this._a < 1 && this._a >= 0;\n            var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n            if (needsAlphaFormat) {\n                // Special case for \"transparent\", all other non-alpha formats\n                // will return rgba when there is transparency.\n                if (format === \"name\" && this._a === 0) return this.toName();\n                return this.toRgbString();\n            }\n            if (format === \"rgb\") formattedString = this.toRgbString();\n            if (format === \"prgb\") formattedString = this.toPercentageRgbString();\n            if (format === \"hex\" || format === \"hex6\") formattedString = this.toHexString();\n            if (format === \"hex3\") formattedString = this.toHexString(true);\n            if (format === \"hex4\") formattedString = this.toHex8String(true);\n            if (format === \"hex8\") formattedString = this.toHex8String();\n            if (format === \"name\") formattedString = this.toName();\n            if (format === \"hsl\") formattedString = this.toHslString();\n            if (format === \"hsv\") formattedString = this.toHsvString();\n            return formattedString || this.toHexString();\n        },\n        clone: function clone() {\n            return tinycolor(this.toString());\n        },\n        _applyModification: function _applyModification(fn, args) {\n            var color = fn.apply(null, [\n                this\n            ].concat([].slice.call(args)));\n            this._r = color._r;\n            this._g = color._g;\n            this._b = color._b;\n            this.setAlpha(color._a);\n            return this;\n        },\n        lighten: function lighten() {\n            return this._applyModification(_lighten, arguments);\n        },\n        brighten: function brighten() {\n            return this._applyModification(_brighten, arguments);\n        },\n        darken: function darken() {\n            return this._applyModification(_darken, arguments);\n        },\n        desaturate: function desaturate() {\n            return this._applyModification(_desaturate, arguments);\n        },\n        saturate: function saturate() {\n            return this._applyModification(_saturate, arguments);\n        },\n        greyscale: function greyscale() {\n            return this._applyModification(_greyscale, arguments);\n        },\n        spin: function spin() {\n            return this._applyModification(_spin, arguments);\n        },\n        _applyCombination: function _applyCombination(fn, args) {\n            return fn.apply(null, [\n                this\n            ].concat([].slice.call(args)));\n        },\n        analogous: function analogous() {\n            return this._applyCombination(_analogous, arguments);\n        },\n        complement: function complement() {\n            return this._applyCombination(_complement, arguments);\n        },\n        monochromatic: function monochromatic() {\n            return this._applyCombination(_monochromatic, arguments);\n        },\n        splitcomplement: function splitcomplement() {\n            return this._applyCombination(_splitcomplement, arguments);\n        },\n        // Disabled until https://github.com/bgrins/TinyColor/issues/254\n        // polyad: function (number) {\n        //   return this._applyCombination(polyad, [number]);\n        // },\n        triad: function triad() {\n            return this._applyCombination(polyad, [\n                3\n            ]);\n        },\n        tetrad: function tetrad() {\n            return this._applyCombination(polyad, [\n                4\n            ]);\n        }\n    };\n    // If input is an object, force 1 into \"1.0\" to handle ratios properly\n    // String input requires \"1.0\" as input, so 1 will be treated as 1\n    tinycolor.fromRatio = function(color, opts) {\n        if (_typeof(color) == \"object\") {\n            var newColor = {};\n            for(var i in color)if (color.hasOwnProperty(i)) {\n                if (i === \"a\") newColor[i] = color[i];\n                else newColor[i] = convertToPercentage(color[i]);\n            }\n            color = newColor;\n        }\n        return tinycolor(color, opts);\n    };\n    // Given a string or object, convert that input to RGB\n    // Possible string inputs:\n    //\n    //     \"red\"\n    //     \"#f00\" or \"f00\"\n    //     \"#ff0000\" or \"ff0000\"\n    //     \"#ff000000\" or \"ff000000\"\n    //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n    //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n    //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n    //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n    //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n    //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n    //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n    //\n    function inputToRGB(color) {\n        var rgb = {\n            r: 0,\n            g: 0,\n            b: 0\n        };\n        var a = 1;\n        var s = null;\n        var v = null;\n        var l = null;\n        var ok = false;\n        var format = false;\n        if (typeof color == \"string\") color = stringInputToObject(color);\n        if (_typeof(color) == \"object\") {\n            if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n                rgb = rgbToRgb(color.r, color.g, color.b);\n                ok = true;\n                format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n            } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n                s = convertToPercentage(color.s);\n                v = convertToPercentage(color.v);\n                rgb = hsvToRgb(color.h, s, v);\n                ok = true;\n                format = \"hsv\";\n            } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n                s = convertToPercentage(color.s);\n                l = convertToPercentage(color.l);\n                rgb = hslToRgb(color.h, s, l);\n                ok = true;\n                format = \"hsl\";\n            }\n            if (color.hasOwnProperty(\"a\")) a = color.a;\n        }\n        a = boundAlpha(a);\n        return {\n            ok: ok,\n            format: color.format || format,\n            r: Math.min(255, Math.max(rgb.r, 0)),\n            g: Math.min(255, Math.max(rgb.g, 0)),\n            b: Math.min(255, Math.max(rgb.b, 0)),\n            a: a\n        };\n    }\n    // Conversion Functions\n    // --------------------\n    // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n    // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n    // `rgbToRgb`\n    // Handle bounds / percentage checking to conform to CSS color spec\n    // <http://www.w3.org/TR/css3-color/>\n    // *Assumes:* r, g, b in [0, 255] or [0, 1]\n    // *Returns:* { r, g, b } in [0, 255]\n    function rgbToRgb(r, g, b) {\n        return {\n            r: bound01(r, 255) * 255,\n            g: bound01(g, 255) * 255,\n            b: bound01(b, 255) * 255\n        };\n    }\n    // `rgbToHsl`\n    // Converts an RGB color value to HSL.\n    // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n    // *Returns:* { h, s, l } in [0,1]\n    function rgbToHsl(r, g, b) {\n        r = bound01(r, 255);\n        g = bound01(g, 255);\n        b = bound01(b, 255);\n        var max = Math.max(r, g, b), min = Math.min(r, g, b);\n        var h, s, l = (max + min) / 2;\n        if (max == min) h = s = 0; // achromatic\n        else {\n            var d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            switch(max){\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n            h /= 6;\n        }\n        return {\n            h: h,\n            s: s,\n            l: l\n        };\n    }\n    // `hslToRgb`\n    // Converts an HSL color value to RGB.\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n    // *Returns:* { r, g, b } in the set [0, 255]\n    function hslToRgb(h, s, l) {\n        var r, g, b;\n        h = bound01(h, 360);\n        s = bound01(s, 100);\n        l = bound01(l, 100);\n        function hue2rgb(p, q, t) {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 0.5) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        }\n        if (s === 0) r = g = b = l; // achromatic\n        else {\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            var p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1 / 3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1 / 3);\n        }\n        return {\n            r: r * 255,\n            g: g * 255,\n            b: b * 255\n        };\n    }\n    // `rgbToHsv`\n    // Converts an RGB color value to HSV\n    // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n    // *Returns:* { h, s, v } in [0,1]\n    function rgbToHsv(r, g, b) {\n        r = bound01(r, 255);\n        g = bound01(g, 255);\n        b = bound01(b, 255);\n        var max = Math.max(r, g, b), min = Math.min(r, g, b);\n        var h, s, v = max;\n        var d = max - min;\n        s = max === 0 ? 0 : d / max;\n        if (max == min) h = 0; // achromatic\n        else {\n            switch(max){\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n            h /= 6;\n        }\n        return {\n            h: h,\n            s: s,\n            v: v\n        };\n    }\n    // `hsvToRgb`\n    // Converts an HSV color value to RGB.\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n    // *Returns:* { r, g, b } in the set [0, 255]\n    function hsvToRgb(h, s, v) {\n        h = bound01(h, 360) * 6;\n        s = bound01(s, 100);\n        v = bound01(v, 100);\n        var i = Math.floor(h), f = h - i, p = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s), mod = i % 6, r = [\n            v,\n            q,\n            p,\n            p,\n            t,\n            v\n        ][mod], g = [\n            t,\n            v,\n            v,\n            q,\n            p,\n            p\n        ][mod], b = [\n            p,\n            p,\n            t,\n            v,\n            v,\n            q\n        ][mod];\n        return {\n            r: r * 255,\n            g: g * 255,\n            b: b * 255\n        };\n    }\n    // `rgbToHex`\n    // Converts an RGB color to hex\n    // Assumes r, g, and b are contained in the set [0, 255]\n    // Returns a 3 or 6 character hex\n    function rgbToHex(r, g, b, allow3Char) {\n        var hex = [\n            pad2(Math.round(r).toString(16)),\n            pad2(Math.round(g).toString(16)),\n            pad2(Math.round(b).toString(16))\n        ];\n        // Return a 3 character hex if possible\n        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n        return hex.join(\"\");\n    }\n    // `rgbaToHex`\n    // Converts an RGBA color plus alpha transparency to hex\n    // Assumes r, g, b are contained in the set [0, 255] and\n    // a in [0, 1]. Returns a 4 or 8 character rgba hex\n    function rgbaToHex(r, g, b, a, allow4Char) {\n        var hex = [\n            pad2(Math.round(r).toString(16)),\n            pad2(Math.round(g).toString(16)),\n            pad2(Math.round(b).toString(16)),\n            pad2(convertDecimalToHex(a))\n        ];\n        // Return a 4 character hex if possible\n        if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n        return hex.join(\"\");\n    }\n    // `rgbaToArgbHex`\n    // Converts an RGBA color to an ARGB Hex8 string\n    // Rarely used, but required for \"toFilter()\"\n    function rgbaToArgbHex(r, g, b, a) {\n        var hex = [\n            pad2(convertDecimalToHex(a)),\n            pad2(Math.round(r).toString(16)),\n            pad2(Math.round(g).toString(16)),\n            pad2(Math.round(b).toString(16))\n        ];\n        return hex.join(\"\");\n    }\n    // `equals`\n    // Can be called with any tinycolor input\n    tinycolor.equals = function(color1, color2) {\n        if (!color1 || !color2) return false;\n        return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n    };\n    tinycolor.random = function() {\n        return tinycolor.fromRatio({\n            r: Math.random(),\n            g: Math.random(),\n            b: Math.random()\n        });\n    };\n    // Modification Functions\n    // ----------------------\n    // Thanks to less.js for some of the basics here\n    // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n    function _desaturate(color, amount) {\n        amount = amount === 0 ? 0 : amount || 10;\n        var hsl = tinycolor(color).toHsl();\n        hsl.s -= amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return tinycolor(hsl);\n    }\n    function _saturate(color, amount) {\n        amount = amount === 0 ? 0 : amount || 10;\n        var hsl = tinycolor(color).toHsl();\n        hsl.s += amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return tinycolor(hsl);\n    }\n    function _greyscale(color) {\n        return tinycolor(color).desaturate(100);\n    }\n    function _lighten(color, amount) {\n        amount = amount === 0 ? 0 : amount || 10;\n        var hsl = tinycolor(color).toHsl();\n        hsl.l += amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return tinycolor(hsl);\n    }\n    function _brighten(color, amount) {\n        amount = amount === 0 ? 0 : amount || 10;\n        var rgb = tinycolor(color).toRgb();\n        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n        return tinycolor(rgb);\n    }\n    function _darken(color, amount) {\n        amount = amount === 0 ? 0 : amount || 10;\n        var hsl = tinycolor(color).toHsl();\n        hsl.l -= amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return tinycolor(hsl);\n    }\n    // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n    // Values outside of this range will be wrapped into this range.\n    function _spin(color, amount) {\n        var hsl = tinycolor(color).toHsl();\n        var hue = (hsl.h + amount) % 360;\n        hsl.h = hue < 0 ? 360 + hue : hue;\n        return tinycolor(hsl);\n    }\n    // Combination Functions\n    // ---------------------\n    // Thanks to jQuery xColor for some of the ideas behind these\n    // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n    function _complement(color) {\n        var hsl = tinycolor(color).toHsl();\n        hsl.h = (hsl.h + 180) % 360;\n        return tinycolor(hsl);\n    }\n    function polyad(color, number) {\n        if (isNaN(number) || number <= 0) throw new Error(\"Argument to polyad must be a positive number\");\n        var hsl = tinycolor(color).toHsl();\n        var result = [\n            tinycolor(color)\n        ];\n        var step = 360 / number;\n        for(var i = 1; i < number; i++)result.push(tinycolor({\n            h: (hsl.h + i * step) % 360,\n            s: hsl.s,\n            l: hsl.l\n        }));\n        return result;\n    }\n    function _splitcomplement(color) {\n        var hsl = tinycolor(color).toHsl();\n        var h = hsl.h;\n        return [\n            tinycolor(color),\n            tinycolor({\n                h: (h + 72) % 360,\n                s: hsl.s,\n                l: hsl.l\n            }),\n            tinycolor({\n                h: (h + 216) % 360,\n                s: hsl.s,\n                l: hsl.l\n            })\n        ];\n    }\n    function _analogous(color, results, slices) {\n        results = results || 6;\n        slices = slices || 30;\n        var hsl = tinycolor(color).toHsl();\n        var part = 360 / slices;\n        var ret = [\n            tinycolor(color)\n        ];\n        for(hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;){\n            hsl.h = (hsl.h + part) % 360;\n            ret.push(tinycolor(hsl));\n        }\n        return ret;\n    }\n    function _monochromatic(color, results) {\n        results = results || 6;\n        var hsv = tinycolor(color).toHsv();\n        var h = hsv.h, s = hsv.s, v = hsv.v;\n        var ret = [];\n        var modification = 1 / results;\n        while(results--){\n            ret.push(tinycolor({\n                h: h,\n                s: s,\n                v: v\n            }));\n            v = (v + modification) % 1;\n        }\n        return ret;\n    }\n    // Utility Functions\n    // ---------------------\n    tinycolor.mix = function(color1, color2, amount) {\n        amount = amount === 0 ? 0 : amount || 50;\n        var rgb1 = tinycolor(color1).toRgb();\n        var rgb2 = tinycolor(color2).toRgb();\n        var p = amount / 100;\n        var rgba = {\n            r: (rgb2.r - rgb1.r) * p + rgb1.r,\n            g: (rgb2.g - rgb1.g) * p + rgb1.g,\n            b: (rgb2.b - rgb1.b) * p + rgb1.b,\n            a: (rgb2.a - rgb1.a) * p + rgb1.a\n        };\n        return tinycolor(rgba);\n    };\n    // Readability Functions\n    // ---------------------\n    // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n    // `contrast`\n    // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n    tinycolor.readability = function(color1, color2) {\n        var c1 = tinycolor(color1);\n        var c2 = tinycolor(color2);\n        return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);\n    };\n    // `isReadable`\n    // Ensure that foreground and background color combinations meet WCAG2 guidelines.\n    // The third argument is an optional Object.\n    //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n    //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n    // If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n    // *Example*\n    //    tinycolor.isReadable(\"#000\", \"#111\") => false\n    //    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\n    tinycolor.isReadable = function(color1, color2, wcag2) {\n        var readability = tinycolor.readability(color1, color2);\n        var wcag2Parms, out;\n        out = false;\n        wcag2Parms = validateWCAG2Parms(wcag2);\n        switch(wcag2Parms.level + wcag2Parms.size){\n            case \"AAsmall\":\n            case \"AAAlarge\":\n                out = readability >= 4.5;\n                break;\n            case \"AAlarge\":\n                out = readability >= 3;\n                break;\n            case \"AAAsmall\":\n                out = readability >= 7;\n                break;\n        }\n        return out;\n    };\n    // `mostReadable`\n    // Given a base color and a list of possible foreground or background\n    // colors for that base, returns the most readable color.\n    // Optionally returns Black or White if the most readable color is unreadable.\n    // *Example*\n    //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n    //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n    //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n    //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\n    tinycolor.mostReadable = function(baseColor, colorList, args) {\n        var bestColor = null;\n        var bestScore = 0;\n        var readability;\n        var includeFallbackColors, level, size;\n        args = args || {};\n        includeFallbackColors = args.includeFallbackColors;\n        level = args.level;\n        size = args.size;\n        for(var i = 0; i < colorList.length; i++){\n            readability = tinycolor.readability(baseColor, colorList[i]);\n            if (readability > bestScore) {\n                bestScore = readability;\n                bestColor = tinycolor(colorList[i]);\n            }\n        }\n        if (tinycolor.isReadable(baseColor, bestColor, {\n            level: level,\n            size: size\n        }) || !includeFallbackColors) return bestColor;\n        else {\n            args.includeFallbackColors = false;\n            return tinycolor.mostReadable(baseColor, [\n                \"#fff\",\n                \"#000\"\n            ], args);\n        }\n    };\n    // Big List of Colors\n    // ------------------\n    // <https://www.w3.org/TR/css-color-4/#named-colors>\n    var names = tinycolor.names = {\n        aliceblue: \"f0f8ff\",\n        antiquewhite: \"faebd7\",\n        aqua: \"0ff\",\n        aquamarine: \"7fffd4\",\n        azure: \"f0ffff\",\n        beige: \"f5f5dc\",\n        bisque: \"ffe4c4\",\n        black: \"000\",\n        blanchedalmond: \"ffebcd\",\n        blue: \"00f\",\n        blueviolet: \"8a2be2\",\n        brown: \"a52a2a\",\n        burlywood: \"deb887\",\n        burntsienna: \"ea7e5d\",\n        cadetblue: \"5f9ea0\",\n        chartreuse: \"7fff00\",\n        chocolate: \"d2691e\",\n        coral: \"ff7f50\",\n        cornflowerblue: \"6495ed\",\n        cornsilk: \"fff8dc\",\n        crimson: \"dc143c\",\n        cyan: \"0ff\",\n        darkblue: \"00008b\",\n        darkcyan: \"008b8b\",\n        darkgoldenrod: \"b8860b\",\n        darkgray: \"a9a9a9\",\n        darkgreen: \"006400\",\n        darkgrey: \"a9a9a9\",\n        darkkhaki: \"bdb76b\",\n        darkmagenta: \"8b008b\",\n        darkolivegreen: \"556b2f\",\n        darkorange: \"ff8c00\",\n        darkorchid: \"9932cc\",\n        darkred: \"8b0000\",\n        darksalmon: \"e9967a\",\n        darkseagreen: \"8fbc8f\",\n        darkslateblue: \"483d8b\",\n        darkslategray: \"2f4f4f\",\n        darkslategrey: \"2f4f4f\",\n        darkturquoise: \"00ced1\",\n        darkviolet: \"9400d3\",\n        deeppink: \"ff1493\",\n        deepskyblue: \"00bfff\",\n        dimgray: \"696969\",\n        dimgrey: \"696969\",\n        dodgerblue: \"1e90ff\",\n        firebrick: \"b22222\",\n        floralwhite: \"fffaf0\",\n        forestgreen: \"228b22\",\n        fuchsia: \"f0f\",\n        gainsboro: \"dcdcdc\",\n        ghostwhite: \"f8f8ff\",\n        gold: \"ffd700\",\n        goldenrod: \"daa520\",\n        gray: \"808080\",\n        green: \"008000\",\n        greenyellow: \"adff2f\",\n        grey: \"808080\",\n        honeydew: \"f0fff0\",\n        hotpink: \"ff69b4\",\n        indianred: \"cd5c5c\",\n        indigo: \"4b0082\",\n        ivory: \"fffff0\",\n        khaki: \"f0e68c\",\n        lavender: \"e6e6fa\",\n        lavenderblush: \"fff0f5\",\n        lawngreen: \"7cfc00\",\n        lemonchiffon: \"fffacd\",\n        lightblue: \"add8e6\",\n        lightcoral: \"f08080\",\n        lightcyan: \"e0ffff\",\n        lightgoldenrodyellow: \"fafad2\",\n        lightgray: \"d3d3d3\",\n        lightgreen: \"90ee90\",\n        lightgrey: \"d3d3d3\",\n        lightpink: \"ffb6c1\",\n        lightsalmon: \"ffa07a\",\n        lightseagreen: \"20b2aa\",\n        lightskyblue: \"87cefa\",\n        lightslategray: \"789\",\n        lightslategrey: \"789\",\n        lightsteelblue: \"b0c4de\",\n        lightyellow: \"ffffe0\",\n        lime: \"0f0\",\n        limegreen: \"32cd32\",\n        linen: \"faf0e6\",\n        magenta: \"f0f\",\n        maroon: \"800000\",\n        mediumaquamarine: \"66cdaa\",\n        mediumblue: \"0000cd\",\n        mediumorchid: \"ba55d3\",\n        mediumpurple: \"9370db\",\n        mediumseagreen: \"3cb371\",\n        mediumslateblue: \"7b68ee\",\n        mediumspringgreen: \"00fa9a\",\n        mediumturquoise: \"48d1cc\",\n        mediumvioletred: \"c71585\",\n        midnightblue: \"191970\",\n        mintcream: \"f5fffa\",\n        mistyrose: \"ffe4e1\",\n        moccasin: \"ffe4b5\",\n        navajowhite: \"ffdead\",\n        navy: \"000080\",\n        oldlace: \"fdf5e6\",\n        olive: \"808000\",\n        olivedrab: \"6b8e23\",\n        orange: \"ffa500\",\n        orangered: \"ff4500\",\n        orchid: \"da70d6\",\n        palegoldenrod: \"eee8aa\",\n        palegreen: \"98fb98\",\n        paleturquoise: \"afeeee\",\n        palevioletred: \"db7093\",\n        papayawhip: \"ffefd5\",\n        peachpuff: \"ffdab9\",\n        peru: \"cd853f\",\n        pink: \"ffc0cb\",\n        plum: \"dda0dd\",\n        powderblue: \"b0e0e6\",\n        purple: \"800080\",\n        rebeccapurple: \"663399\",\n        red: \"f00\",\n        rosybrown: \"bc8f8f\",\n        royalblue: \"4169e1\",\n        saddlebrown: \"8b4513\",\n        salmon: \"fa8072\",\n        sandybrown: \"f4a460\",\n        seagreen: \"2e8b57\",\n        seashell: \"fff5ee\",\n        sienna: \"a0522d\",\n        silver: \"c0c0c0\",\n        skyblue: \"87ceeb\",\n        slateblue: \"6a5acd\",\n        slategray: \"708090\",\n        slategrey: \"708090\",\n        snow: \"fffafa\",\n        springgreen: \"00ff7f\",\n        steelblue: \"4682b4\",\n        tan: \"d2b48c\",\n        teal: \"008080\",\n        thistle: \"d8bfd8\",\n        tomato: \"ff6347\",\n        turquoise: \"40e0d0\",\n        violet: \"ee82ee\",\n        wheat: \"f5deb3\",\n        white: \"fff\",\n        whitesmoke: \"f5f5f5\",\n        yellow: \"ff0\",\n        yellowgreen: \"9acd32\"\n    };\n    // Make it easy to access colors via `hexNames[hex]`\n    var hexNames = tinycolor.hexNames = flip(names);\n    // Utilities\n    // ---------\n    // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\n    function flip(o) {\n        var flipped = {};\n        for(var i in o)if (o.hasOwnProperty(i)) flipped[o[i]] = i;\n        return flipped;\n    }\n    // Return a valid alpha value [0,1] with all invalid values being set to 1\n    function boundAlpha(a) {\n        a = parseFloat(a);\n        if (isNaN(a) || a < 0 || a > 1) a = 1;\n        return a;\n    }\n    // Take input from [0, n] and return it as [0, 1]\n    function bound01(n, max) {\n        if (isOnePointZero(n)) n = \"100%\";\n        var processPercent = isPercentage(n);\n        n = Math.min(max, Math.max(0, parseFloat(n)));\n        // Automatically convert percentage into number\n        if (processPercent) n = parseInt(n * max, 10) / 100;\n        // Handle floating point rounding errors\n        if (Math.abs(n - max) < 0.000001) return 1;\n        // Convert into [0, 1] range if it isn't already\n        return n % max / parseFloat(max);\n    }\n    // Force a number between 0 and 1\n    function clamp01(val) {\n        return Math.min(1, Math.max(0, val));\n    }\n    // Parse a base-16 hex value into a base-10 integer\n    function parseIntFromHex(val) {\n        return parseInt(val, 16);\n    }\n    // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n    // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n    function isOnePointZero(n) {\n        return typeof n == \"string\" && n.indexOf(\".\") != -1 && parseFloat(n) === 1;\n    }\n    // Check to see if string passed in is a percentage\n    function isPercentage(n) {\n        return typeof n === \"string\" && n.indexOf(\"%\") != -1;\n    }\n    // Force a hex value to have 2 characters\n    function pad2(c) {\n        return c.length == 1 ? \"0\" + c : \"\" + c;\n    }\n    // Replace a decimal with it's percentage value\n    function convertToPercentage(n) {\n        if (n <= 1) n = n * 100 + \"%\";\n        return n;\n    }\n    // Converts a decimal to a hex value\n    function convertDecimalToHex(d) {\n        return Math.round(parseFloat(d) * 255).toString(16);\n    }\n    // Converts a hex value to a decimal\n    function convertHexToDecimal(h) {\n        return parseIntFromHex(h) / 255;\n    }\n    var matchers = function() {\n        // <http://www.w3.org/TR/css3-values/#integers>\n        var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n        // <http://www.w3.org/TR/css3-values/#number-value>\n        var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n        // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n        var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n        // Actual matching.\n        // Parentheses and commas are optional, but not required.\n        // Whitespace can take the place of commas or opening paren\n        var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n        var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n        return {\n            CSS_UNIT: new RegExp(CSS_UNIT),\n            rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n            rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n            hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n            hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n            hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n            hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n            hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n            hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n            hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n            hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n        };\n    }();\n    // `isValidCSSUnit`\n    // Take in a single string / number and check to see if it looks like a CSS unit\n    // (see `matchers` above for definition).\n    function isValidCSSUnit(color) {\n        return !!matchers.CSS_UNIT.exec(color);\n    }\n    // `stringInputToObject`\n    // Permissive string parsing.  Take in a number of formats, and output an object\n    // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n    function stringInputToObject(color) {\n        color = color.replace(trimLeft, \"\").replace(trimRight, \"\").toLowerCase();\n        var named = false;\n        if (names[color]) {\n            color = names[color];\n            named = true;\n        } else if (color == \"transparent\") return {\n            r: 0,\n            g: 0,\n            b: 0,\n            a: 0,\n            format: \"name\"\n        };\n        // Try to match string input using regular expressions.\n        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n        // Just return an object and let the conversion functions handle that.\n        // This way the result will be the same whether the tinycolor is initialized with string or object.\n        var match;\n        if (match = matchers.rgb.exec(color)) return {\n            r: match[1],\n            g: match[2],\n            b: match[3]\n        };\n        if (match = matchers.rgba.exec(color)) return {\n            r: match[1],\n            g: match[2],\n            b: match[3],\n            a: match[4]\n        };\n        if (match = matchers.hsl.exec(color)) return {\n            h: match[1],\n            s: match[2],\n            l: match[3]\n        };\n        if (match = matchers.hsla.exec(color)) return {\n            h: match[1],\n            s: match[2],\n            l: match[3],\n            a: match[4]\n        };\n        if (match = matchers.hsv.exec(color)) return {\n            h: match[1],\n            s: match[2],\n            v: match[3]\n        };\n        if (match = matchers.hsva.exec(color)) return {\n            h: match[1],\n            s: match[2],\n            v: match[3],\n            a: match[4]\n        };\n        if (match = matchers.hex8.exec(color)) return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n        if (match = matchers.hex6.exec(color)) return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n        if (match = matchers.hex4.exec(color)) return {\n            r: parseIntFromHex(match[1] + \"\" + match[1]),\n            g: parseIntFromHex(match[2] + \"\" + match[2]),\n            b: parseIntFromHex(match[3] + \"\" + match[3]),\n            a: convertHexToDecimal(match[4] + \"\" + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n        if (match = matchers.hex3.exec(color)) return {\n            r: parseIntFromHex(match[1] + \"\" + match[1]),\n            g: parseIntFromHex(match[2] + \"\" + match[2]),\n            b: parseIntFromHex(match[3] + \"\" + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n        return false;\n    }\n    function validateWCAG2Parms(parms) {\n        // return valid WCAG2 parms for isReadable.\n        // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n        var level, size;\n        parms = parms || {\n            level: \"AA\",\n            size: \"small\"\n        };\n        level = (parms.level || \"AA\").toUpperCase();\n        size = (parms.size || \"small\").toLowerCase();\n        if (level !== \"AA\" && level !== \"AAA\") level = \"AA\";\n        if (size !== \"small\" && size !== \"large\") size = \"small\";\n        return {\n            level: level,\n            size: size\n        };\n    }\n    return tinycolor;\n});\n\n});\n\nvar $530f8f6e0a4be09f$exports = {};\n\n/*!\n * tinygradient (v1.1.5)\n * @copyright 2014-2021 Damien \"Mistic\" Sorel <contact@git.strangeplanet.fr>\n * @licence MIT\n */ (function(global, factory) {\n    $530f8f6e0a4be09f$exports = factory((parcelRequire(\"1g88j\")));\n})($530f8f6e0a4be09f$exports, function(tinycolor2) {\n    \"use strict\";\n    function _interopDefaultLegacy(e) {\n        return e && typeof e === \"object\" && \"default\" in e ? e : {\n            \"default\": e\n        };\n    }\n    var tinycolor2__default = /*#__PURE__*/ _interopDefaultLegacy(tinycolor2);\n    /**\n     * @typedef {Object} TinyGradient.StopInput\n     * @property {ColorInput} color\n     * @property {number} pos\n     */ /**\n     * @typedef {Object} TinyGradient.StepValue\n     * @type {number} [r]\n     * @type {number} [g]\n     * @type {number} [b]\n     * @type {number} [h]\n     * @type {number} [s]\n     * @type {number} [v]\n     * @type {number} [a]\n     */ /**\n     * @type {StepValue}\n     */ var RGBA_MAX = {\n        r: 256,\n        g: 256,\n        b: 256,\n        a: 1\n    };\n    /**\n     * @type {StepValue}\n     */ var HSVA_MAX = {\n        h: 360,\n        s: 1,\n        v: 1,\n        a: 1\n    };\n    /**\n     * Linearly compute the step size between start and end (not normalized)\n     * @param {StepValue} start\n     * @param {StepValue} end\n     * @param {number} steps - number of desired steps\n     * @return {StepValue}\n     */ function stepize(start, end, steps) {\n        var step = {};\n        for(var k in start)if (start.hasOwnProperty(k)) step[k] = steps === 0 ? 0 : (end[k] - start[k]) / steps;\n        return step;\n    }\n    /**\n     * Compute the final step color\n     * @param {StepValue} step - from `stepize`\n     * @param {StepValue} start\n     * @param {number} i - color index\n     * @param {StepValue} max - rgba or hsva of maximum values for each channel\n     * @return {StepValue}\n     */ function interpolate(step, start, i, max) {\n        var color = {};\n        for(var k in start)if (start.hasOwnProperty(k)) {\n            color[k] = step[k] * i + start[k];\n            color[k] = color[k] < 0 ? color[k] + max[k] : max[k] !== 1 ? color[k] % max[k] : color[k];\n        }\n        return color;\n    }\n    /**\n     * Generate gradient with RGBa interpolation\n     * @param {StopInput} stop1\n     * @param {StopInput} stop2\n     * @param {number} steps\n     * @return {tinycolor[]} color1 included, color2 excluded\n     */ function interpolateRgb(stop1, stop2, steps) {\n        var start = stop1.color.toRgb();\n        var end = stop2.color.toRgb();\n        var step = stepize(start, end, steps);\n        var gradient = [\n            stop1.color\n        ];\n        for(var i = 1; i < steps; i++){\n            var color = interpolate(step, start, i, RGBA_MAX);\n            gradient.push(tinycolor2__default[\"default\"](color));\n        }\n        return gradient;\n    }\n    /**\n     * Generate gradient with HSVa interpolation\n     * @param {StopInput} stop1\n     * @param {StopInput} stop2\n     * @param {number} steps\n     * @param {boolean|'long'|'short'} mode\n     * @return {tinycolor[]} color1 included, color2 excluded\n     */ function interpolateHsv(stop1, stop2, steps, mode) {\n        var start = stop1.color.toHsv();\n        var end = stop2.color.toHsv(); // rgb interpolation if one of the steps in grayscale\n        if (start.s === 0 || end.s === 0) return interpolateRgb(stop1, stop2, steps);\n        var trigonometric;\n        if (typeof mode === \"boolean\") trigonometric = mode;\n        else {\n            var trigShortest = start.h < end.h && end.h - start.h < 180 || start.h > end.h && start.h - end.h > 180;\n            trigonometric = mode === \"long\" && trigShortest || mode === \"short\" && !trigShortest;\n        }\n        var step = stepize(start, end, steps);\n        var gradient = [\n            stop1.color\n        ]; // recompute hue\n        var diff;\n        if (start.h <= end.h && !trigonometric || start.h >= end.h && trigonometric) diff = end.h - start.h;\n        else if (trigonometric) diff = 360 - end.h + start.h;\n        else diff = 360 - start.h + end.h;\n        step.h = Math.pow(-1, trigonometric ? 1 : 0) * Math.abs(diff) / steps;\n        for(var i = 1; i < steps; i++){\n            var color = interpolate(step, start, i, HSVA_MAX);\n            gradient.push(tinycolor2__default[\"default\"](color));\n        }\n        return gradient;\n    }\n    /**\n     * Compute substeps between each stops\n     * @param {StopInput[]} stops\n     * @param {number} steps\n     * @return {number[]}\n     */ function computeSubsteps(stops, steps) {\n        var l = stops.length; // validation\n        steps = parseInt(steps, 10);\n        if (isNaN(steps) || steps < 2) throw new Error(\"Invalid number of steps (< 2)\");\n        if (steps < l) throw new Error(\"Number of steps cannot be inferior to number of stops\");\n         // compute substeps from stop positions\n        var substeps = [];\n        for(var i = 1; i < l; i++){\n            var step = (steps - 1) * (stops[i].pos - stops[i - 1].pos);\n            substeps.push(Math.max(1, Math.round(step)));\n        } // adjust number of steps\n        var totalSubsteps = 1;\n        for(var n = l - 1; n--;)totalSubsteps += substeps[n];\n        while(totalSubsteps !== steps)if (totalSubsteps < steps) {\n            var min = Math.min.apply(null, substeps);\n            substeps[substeps.indexOf(min)]++;\n            totalSubsteps++;\n        } else {\n            var max = Math.max.apply(null, substeps);\n            substeps[substeps.indexOf(max)]--;\n            totalSubsteps--;\n        }\n        return substeps;\n    }\n    /**\n     * Compute the color at a specific position\n     * @param {StopInput[]} stops\n     * @param {number} pos\n     * @param {string} method\n     * @param {StepValue} max\n     * @returns {tinycolor}\n     */ function computeAt(stops, pos, method, max) {\n        if (pos < 0 || pos > 1) throw new Error(\"Position must be between 0 and 1\");\n        var start, end;\n        for(var i = 0, l = stops.length; i < l - 1; i++)if (pos >= stops[i].pos && pos < stops[i + 1].pos) {\n            start = stops[i];\n            end = stops[i + 1];\n            break;\n        }\n        if (!start) start = end = stops[stops.length - 1];\n        var step = stepize(start.color[method](), end.color[method](), (end.pos - start.pos) * 100);\n        var color = interpolate(step, start.color[method](), (pos - start.pos) * 100, max);\n        return tinycolor2__default[\"default\"](color);\n    }\n    var TinyGradient = /*#__PURE__*/ function() {\n        /**\n       * @param {StopInput[]|ColorInput[]} stops\n       * @returns {TinyGradient}\n       */ function TinyGradient(stops) {\n            // validation\n            if (stops.length < 2) throw new Error(\"Invalid number of stops (< 2)\");\n            var havingPositions = stops[0].pos !== undefined;\n            var l = stops.length;\n            var p = -1;\n            var lastColorLess = false; // create tinycolor objects and clean positions\n            this.stops = stops.map(function(stop, i) {\n                var hasPosition = stop.pos !== undefined;\n                if (havingPositions ^ hasPosition) throw new Error(\"Cannot mix positionned and not posionned color stops\");\n                if (hasPosition) {\n                    var hasColor = stop.color !== undefined;\n                    if (!hasColor && (lastColorLess || i === 0 || i === l - 1)) throw new Error(\"Cannot define two consecutive position-only stops\");\n                    lastColorLess = !hasColor;\n                    stop = {\n                        color: hasColor ? tinycolor2__default[\"default\"](stop.color) : null,\n                        colorLess: !hasColor,\n                        pos: stop.pos\n                    };\n                    if (stop.pos < 0 || stop.pos > 1) throw new Error(\"Color stops positions must be between 0 and 1\");\n                    else if (stop.pos < p) throw new Error(\"Color stops positions are not ordered\");\n                    p = stop.pos;\n                } else stop = {\n                    color: tinycolor2__default[\"default\"](stop.color !== undefined ? stop.color : stop),\n                    pos: i / (l - 1)\n                };\n                return stop;\n            });\n            if (this.stops[0].pos !== 0) {\n                this.stops.unshift({\n                    color: this.stops[0].color,\n                    pos: 0\n                });\n                l++;\n            }\n            if (this.stops[l - 1].pos !== 1) this.stops.push({\n                color: this.stops[l - 1].color,\n                pos: 1\n            });\n        }\n        /**\n       * Return new instance with reversed stops\n       * @return {TinyGradient}\n       */ var _proto = TinyGradient.prototype;\n        _proto.reverse = function reverse() {\n            var stops = [];\n            this.stops.forEach(function(stop) {\n                stops.push({\n                    color: stop.color,\n                    pos: 1 - stop.pos\n                });\n            });\n            return new TinyGradient(stops.reverse());\n        } /**\n       * Return new instance with looped stops\n       * @return {TinyGradient}\n       */ ;\n        _proto.loop = function loop() {\n            var stops1 = [];\n            var stops2 = [];\n            this.stops.forEach(function(stop) {\n                stops1.push({\n                    color: stop.color,\n                    pos: stop.pos / 2\n                });\n            });\n            this.stops.slice(0, -1).forEach(function(stop) {\n                stops2.push({\n                    color: stop.color,\n                    pos: 1 - stop.pos / 2\n                });\n            });\n            return new TinyGradient(stops1.concat(stops2.reverse()));\n        } /**\n       * Generate gradient with RGBa interpolation\n       * @param {number} steps\n       * @return {tinycolor[]}\n       */ ;\n        _proto.rgb = function rgb(steps) {\n            var _this = this;\n            var substeps = computeSubsteps(this.stops, steps);\n            var gradient = [];\n            this.stops.forEach(function(stop, i) {\n                if (stop.colorLess) stop.color = interpolateRgb(_this.stops[i - 1], _this.stops[i + 1], 2)[1];\n            });\n            for(var i = 0, l = this.stops.length; i < l - 1; i++){\n                var rgb = interpolateRgb(this.stops[i], this.stops[i + 1], substeps[i]);\n                gradient.splice.apply(gradient, [\n                    gradient.length,\n                    0\n                ].concat(rgb));\n            }\n            gradient.push(this.stops[this.stops.length - 1].color);\n            return gradient;\n        } /**\n       * Generate gradient with HSVa interpolation\n       * @param {number} steps\n       * @param {boolean|'long'|'short'} [mode=false]\n       *    - false to step in clockwise\n       *    - true to step in trigonometric order\n       *    - 'short' to use the shortest way\n       *    - 'long' to use the longest way\n       * @return {tinycolor[]}\n       */ ;\n        _proto.hsv = function hsv(steps, mode) {\n            var _this2 = this;\n            var substeps = computeSubsteps(this.stops, steps);\n            var gradient = [];\n            this.stops.forEach(function(stop, i) {\n                if (stop.colorLess) stop.color = interpolateHsv(_this2.stops[i - 1], _this2.stops[i + 1], 2, mode)[1];\n            });\n            for(var i = 0, l = this.stops.length; i < l - 1; i++){\n                var hsv = interpolateHsv(this.stops[i], this.stops[i + 1], substeps[i], mode);\n                gradient.splice.apply(gradient, [\n                    gradient.length,\n                    0\n                ].concat(hsv));\n            }\n            gradient.push(this.stops[this.stops.length - 1].color);\n            return gradient;\n        } /**\n       * Generate CSS3 command (no prefix) for this gradient\n       * @param {String} [mode=linear] - 'linear' or 'radial'\n       * @param {String} [direction] - default is 'to right' or 'ellipse at center'\n       * @return {String}\n       */ ;\n        _proto.css = function css(mode, direction) {\n            mode = mode || \"linear\";\n            direction = direction || (mode === \"linear\" ? \"to right\" : \"ellipse at center\");\n            var css = mode + \"-gradient(\" + direction;\n            this.stops.forEach(function(stop) {\n                css += \", \" + (stop.colorLess ? \"\" : stop.color.toRgbString() + \" \") + stop.pos * 100 + \"%\";\n            });\n            css += \")\";\n            return css;\n        } /**\n       * Returns the color at specific position with RGBa interpolation\n       * @param {number} pos, between 0 and 1\n       * @return {tinycolor}\n       */ ;\n        _proto.rgbAt = function rgbAt(pos) {\n            return computeAt(this.stops, pos, \"toRgb\", RGBA_MAX);\n        } /**\n       * Returns the color at specific position with HSVa interpolation\n       * @param {number} pos, between 0 and 1\n       * @return {tinycolor}\n       */ ;\n        _proto.hsvAt = function hsvAt(pos) {\n            return computeAt(this.stops, pos, \"toHsv\", HSVA_MAX);\n        };\n        return TinyGradient;\n    }();\n    /**\n     * @param {StopInput[]|ColorInput[]|StopInput...|ColorInput...} stops\n     * @returns {TinyGradient}\n     */ var tinygradient = function tinygradient(stops) {\n        // varargs\n        if (arguments.length === 1) {\n            if (!Array.isArray(arguments[0])) throw new Error('\"stops\" is not an array');\n            stops = arguments[0];\n        } else stops = Array.prototype.slice.call(arguments);\n        return new TinyGradient(stops);\n    };\n    return tinygradient;\n});\n\n\nclass $3ce70689152ac69f$var$Visualizer {\n    #isInited = false;\n    #timestamp = performance.now();\n    constructor({ audio: audio, canvas: canvas } = {}){\n        this.audioElement = audio ?? document.querySelector(\"audio\");\n        this.canvasElement = canvas ?? document.getElementById(\"yaebal\");\n        this.drawingType = \"Linear\"; // or \"Log\";\n        this.secondsToShow = 10;\n        this.stepsPerSecond = 24;\n        this.fftSize = 1024;\n        this.gradientOptions = [\n            {\n                color: \"#000\",\n                pos: 0\n            },\n            {\n                color: \"#006\",\n                pos: 0.1\n            },\n            {\n                color: \"#f0f\",\n                pos: 1\n            }\n        ];\n        this.gradientValues = $3ce70689152ac69f$var$Visualizer.calculateGradient(this.gradientOptions);\n        this.canvas = $3ce70689152ac69f$var$Visualizer.initCanvas(this.canvasElement);\n        this.bufferCanvas = $3ce70689152ac69f$var$Visualizer.initCanvas(document.createElement(\"canvas\"));\n        this.canvasContext = this.canvas.getContext(\"2d\");\n        this.bufferCanvasContext = this.bufferCanvas.getContext(\"2d\");\n        // `stepHeight` compensates losses of FPS\n        this.stepHeight = Math.ceil(this.canvas.height / this.secondsToShow / this.stepsPerSecond);\n    }\n    static calculateGradient(gradientOptions) {\n        const gradient = (0, (/*@__PURE__*/$parcel$interopDefault($530f8f6e0a4be09f$exports)))(...gradientOptions);\n        const gradientValues = [];\n        const byteLength = 256;\n        for(let i = 0; i < byteLength; i++)gradientValues[i] = gradient.rgbAt(i / byteLength);\n        return gradientValues;\n    }\n    static initCanvas(canvas) {\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        return canvas;\n    }\n    initSong() {\n        if (this.#isInited) return true;\n        let context, source;\n        try {\n            window.AudioContext = window.AudioContext || window.webkitAudioContext;\n            context = new AudioContext();\n        } catch (e) {\n            return false;\n        }\n        source = context.createMediaElementSource(this.audioElement);\n        this.analyser = context.createAnalyser();\n        this.gainNode = context.createGain();\n        this.analyser.minDecibels = -84;\n        this.analyser.maxDecibels = -36;\n        //this.analyser.smoothingTimeConstant = 0.75;\n        this.analyser.fftSize = this.fftSize;\n        let bufferLength = Math.ceil(this.analyser.frequencyBinCount / 1.073); // cut upper frequencies\n        this.dataArray = new Uint8Array(bufferLength);\n        source.connect(this.analyser);\n        this.analyser.connect(this.gainNode);\n        this.gainNode.connect(context.destination);\n        if (this.drawingType.toLocaleLowerCase() === \"linear\") this.barWidth = Math.ceil(this.canvas.width / this.dataArray.length);\n        this.#isInited = true;\n        this.draw();\n        return true;\n    }\n    resetSong() {\n        return this.audioElement.paused ? this.audioElement.play() : this.audioElement.pause();\n    }\n    play(shouldBeMuted) {\n        this.audioElement.muted = false; // mute should be via gainNode\n        this.resetSong(this.audioElement);\n        this.initSong();\n        this.gainNode.gain.value = shouldBeMuted ? 0 : 1;\n        return true;\n    }\n    draw() {\n        this.analyser.getByteFrequencyData(this.dataArray);\n        this.drawCanvas(this.dataArray);\n        this.requestAnimationFrame(()=>this.draw());\n    }\n    requestAnimationFrame(callback) {\n        const now = performance.now();\n        const ms = now - this.#timestamp;\n        this.#timestamp = now;\n        this.stepHeight = Math.ceil(this.canvas.height / this.secondsToShow / 1000 * ms);\n        setTimeout(callback, this.stepsPerSecond);\n    }\n    drawCanvas(dataArray) {\n        this.bufferCanvasContext.drawImage(this.canvas, 0, 0);\n        this.canvasContext.fillStyle = this.gradientValues[0];\n        this.canvasContext.fillRect(0, 0, this.canvas.width, this.stepHeight);\n        this.canvasContext.drawImage(this.bufferCanvas, 0, this.stepHeight);\n        return this[\"drawCanvas\" + this.drawingType](dataArray);\n    }\n    drawCanvasLinear(dataArray) {\n        for(let i = 0; i < dataArray.length; i++){\n            if (!dataArray[i]) continue;\n            this.canvasContext.fillStyle = this.gradientValues[dataArray[i]];\n            this.canvasContext.fillRect(i * this.barWidth, 0, this.barWidth, this.stepHeight);\n        }\n    }\n    drawCanvasLog(dataArray) {\n        let x = 0;\n        let stepWidth = 0;\n        for(let i = 0; i < dataArray.length; i++){\n            if (!dataArray[i]) continue;\n            this.canvasContext.fillStyle = this.gradientValues[dataArray[i]];\n            stepWidth = Math.ceil(Math.log(i + 1) / Math.log(dataArray.length) * this.canvas.width - x);\n            this.canvasContext.fillRect(x, 0, stepWidth, this.stepHeight);\n            x += stepWidth;\n        }\n    }\n}\nvar $3ce70689152ac69f$export$2e2bcd8739ae039 = $3ce70689152ac69f$var$Visualizer;\n\n\nwindow.Veeze = new (0, $3ce70689152ac69f$export$2e2bcd8739ae039)();\nconst $93dbfaf2f7232013$var$button = document.getElementById(\"trigger\");\n$93dbfaf2f7232013$var$button.addEventListener(\"click\", ()=>Veeze.play(0));\n$93dbfaf2f7232013$var$button.addEventListener(\"touchstart\", ()=>Veeze.play(0));\ndocument.querySelectorAll(\".js\").forEach((item)=>item.style.display = \"initial\");\n\n})();\n//# sourceMappingURL=index.en.a591978f.js.map\n","// This file is autogenerated. It's used to publish CJS to npm.\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.tinycolor = factory());\n})(this, (function () { 'use strict';\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n      return typeof obj;\n    } : function (obj) {\n      return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n  }\n\n  // https://github.com/bgrins/TinyColor\n  // Brian Grinstead, MIT License\n\n  var trimLeft = /^\\s+/;\n  var trimRight = /\\s+$/;\n  function tinycolor(color, opts) {\n    color = color ? color : \"\";\n    opts = opts || {};\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n      return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n      return new tinycolor(color, opts);\n    }\n    var rgb = inputToRGB(color);\n    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) this._r = Math.round(this._r);\n    if (this._g < 1) this._g = Math.round(this._g);\n    if (this._b < 1) this._b = Math.round(this._b);\n    this._ok = rgb.ok;\n  }\n  tinycolor.prototype = {\n    isDark: function isDark() {\n      return this.getBrightness() < 128;\n    },\n    isLight: function isLight() {\n      return !this.isDark();\n    },\n    isValid: function isValid() {\n      return this._ok;\n    },\n    getOriginalInput: function getOriginalInput() {\n      return this._originalInput;\n    },\n    getFormat: function getFormat() {\n      return this._format;\n    },\n    getAlpha: function getAlpha() {\n      return this._a;\n    },\n    getBrightness: function getBrightness() {\n      //http://www.w3.org/TR/AERT#color-contrast\n      var rgb = this.toRgb();\n      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function getLuminance() {\n      //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n      var rgb = this.toRgb();\n      var RsRGB, GsRGB, BsRGB, R, G, B;\n      RsRGB = rgb.r / 255;\n      GsRGB = rgb.g / 255;\n      BsRGB = rgb.b / 255;\n      if (RsRGB <= 0.03928) R = RsRGB / 12.92;else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n      if (GsRGB <= 0.03928) G = GsRGB / 12.92;else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n      if (BsRGB <= 0.03928) B = BsRGB / 12.92;else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n      return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    },\n    setAlpha: function setAlpha(value) {\n      this._a = boundAlpha(value);\n      this._roundA = Math.round(100 * this._a) / 100;\n      return this;\n    },\n    toHsv: function toHsv() {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      return {\n        h: hsv.h * 360,\n        s: hsv.s,\n        v: hsv.v,\n        a: this._a\n      };\n    },\n    toHsvString: function toHsvString() {\n      var hsv = rgbToHsv(this._r, this._g, this._b);\n      var h = Math.round(hsv.h * 360),\n        s = Math.round(hsv.s * 100),\n        v = Math.round(hsv.v * 100);\n      return this._a == 1 ? \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\" : \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + this._roundA + \")\";\n    },\n    toHsl: function toHsl() {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      return {\n        h: hsl.h * 360,\n        s: hsl.s,\n        l: hsl.l,\n        a: this._a\n      };\n    },\n    toHslString: function toHslString() {\n      var hsl = rgbToHsl(this._r, this._g, this._b);\n      var h = Math.round(hsl.h * 360),\n        s = Math.round(hsl.s * 100),\n        l = Math.round(hsl.l * 100);\n      return this._a == 1 ? \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\" : \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + this._roundA + \")\";\n    },\n    toHex: function toHex(allow3Char) {\n      return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function toHexString(allow3Char) {\n      return \"#\" + this.toHex(allow3Char);\n    },\n    toHex8: function toHex8(allow4Char) {\n      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function toHex8String(allow4Char) {\n      return \"#\" + this.toHex8(allow4Char);\n    },\n    toRgb: function toRgb() {\n      return {\n        r: Math.round(this._r),\n        g: Math.round(this._g),\n        b: Math.round(this._b),\n        a: this._a\n      };\n    },\n    toRgbString: function toRgbString() {\n      return this._a == 1 ? \"rgb(\" + Math.round(this._r) + \", \" + Math.round(this._g) + \", \" + Math.round(this._b) + \")\" : \"rgba(\" + Math.round(this._r) + \", \" + Math.round(this._g) + \", \" + Math.round(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function toPercentageRgb() {\n      return {\n        r: Math.round(bound01(this._r, 255) * 100) + \"%\",\n        g: Math.round(bound01(this._g, 255) * 100) + \"%\",\n        b: Math.round(bound01(this._b, 255) * 100) + \"%\",\n        a: this._a\n      };\n    },\n    toPercentageRgbString: function toPercentageRgbString() {\n      return this._a == 1 ? \"rgb(\" + Math.round(bound01(this._r, 255) * 100) + \"%, \" + Math.round(bound01(this._g, 255) * 100) + \"%, \" + Math.round(bound01(this._b, 255) * 100) + \"%)\" : \"rgba(\" + Math.round(bound01(this._r, 255) * 100) + \"%, \" + Math.round(bound01(this._g, 255) * 100) + \"%, \" + Math.round(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function toName() {\n      if (this._a === 0) {\n        return \"transparent\";\n      }\n      if (this._a < 1) {\n        return false;\n      }\n      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function toFilter(secondColor) {\n      var hex8String = \"#\" + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n      var secondHex8String = hex8String;\n      var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n      if (secondColor) {\n        var s = tinycolor(secondColor);\n        secondHex8String = \"#\" + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n      }\n      return \"progid:DXImageTransform.Microsoft.gradient(\" + gradientType + \"startColorstr=\" + hex8String + \",endColorstr=\" + secondHex8String + \")\";\n    },\n    toString: function toString(format) {\n      var formatSet = !!format;\n      format = format || this._format;\n      var formattedString = false;\n      var hasAlpha = this._a < 1 && this._a >= 0;\n      var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n      if (needsAlphaFormat) {\n        // Special case for \"transparent\", all other non-alpha formats\n        // will return rgba when there is transparency.\n        if (format === \"name\" && this._a === 0) {\n          return this.toName();\n        }\n        return this.toRgbString();\n      }\n      if (format === \"rgb\") {\n        formattedString = this.toRgbString();\n      }\n      if (format === \"prgb\") {\n        formattedString = this.toPercentageRgbString();\n      }\n      if (format === \"hex\" || format === \"hex6\") {\n        formattedString = this.toHexString();\n      }\n      if (format === \"hex3\") {\n        formattedString = this.toHexString(true);\n      }\n      if (format === \"hex4\") {\n        formattedString = this.toHex8String(true);\n      }\n      if (format === \"hex8\") {\n        formattedString = this.toHex8String();\n      }\n      if (format === \"name\") {\n        formattedString = this.toName();\n      }\n      if (format === \"hsl\") {\n        formattedString = this.toHslString();\n      }\n      if (format === \"hsv\") {\n        formattedString = this.toHsvString();\n      }\n      return formattedString || this.toHexString();\n    },\n    clone: function clone() {\n      return tinycolor(this.toString());\n    },\n    _applyModification: function _applyModification(fn, args) {\n      var color = fn.apply(null, [this].concat([].slice.call(args)));\n      this._r = color._r;\n      this._g = color._g;\n      this._b = color._b;\n      this.setAlpha(color._a);\n      return this;\n    },\n    lighten: function lighten() {\n      return this._applyModification(_lighten, arguments);\n    },\n    brighten: function brighten() {\n      return this._applyModification(_brighten, arguments);\n    },\n    darken: function darken() {\n      return this._applyModification(_darken, arguments);\n    },\n    desaturate: function desaturate() {\n      return this._applyModification(_desaturate, arguments);\n    },\n    saturate: function saturate() {\n      return this._applyModification(_saturate, arguments);\n    },\n    greyscale: function greyscale() {\n      return this._applyModification(_greyscale, arguments);\n    },\n    spin: function spin() {\n      return this._applyModification(_spin, arguments);\n    },\n    _applyCombination: function _applyCombination(fn, args) {\n      return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function analogous() {\n      return this._applyCombination(_analogous, arguments);\n    },\n    complement: function complement() {\n      return this._applyCombination(_complement, arguments);\n    },\n    monochromatic: function monochromatic() {\n      return this._applyCombination(_monochromatic, arguments);\n    },\n    splitcomplement: function splitcomplement() {\n      return this._applyCombination(_splitcomplement, arguments);\n    },\n    // Disabled until https://github.com/bgrins/TinyColor/issues/254\n    // polyad: function (number) {\n    //   return this._applyCombination(polyad, [number]);\n    // },\n    triad: function triad() {\n      return this._applyCombination(polyad, [3]);\n    },\n    tetrad: function tetrad() {\n      return this._applyCombination(polyad, [4]);\n    }\n  };\n\n  // If input is an object, force 1 into \"1.0\" to handle ratios properly\n  // String input requires \"1.0\" as input, so 1 will be treated as 1\n  tinycolor.fromRatio = function (color, opts) {\n    if (_typeof(color) == \"object\") {\n      var newColor = {};\n      for (var i in color) {\n        if (color.hasOwnProperty(i)) {\n          if (i === \"a\") {\n            newColor[i] = color[i];\n          } else {\n            newColor[i] = convertToPercentage(color[i]);\n          }\n        }\n      }\n      color = newColor;\n    }\n    return tinycolor(color, opts);\n  };\n\n  // Given a string or object, convert that input to RGB\n  // Possible string inputs:\n  //\n  //     \"red\"\n  //     \"#f00\" or \"f00\"\n  //     \"#ff0000\" or \"ff0000\"\n  //     \"#ff000000\" or \"ff000000\"\n  //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n  //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n  //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n  //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n  //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n  //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n  //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n  //\n  function inputToRGB(color) {\n    var rgb = {\n      r: 0,\n      g: 0,\n      b: 0\n    };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n    if (typeof color == \"string\") {\n      color = stringInputToObject(color);\n    }\n    if (_typeof(color) == \"object\") {\n      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n        rgb = rgbToRgb(color.r, color.g, color.b);\n        ok = true;\n        format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n        s = convertToPercentage(color.s);\n        v = convertToPercentage(color.v);\n        rgb = hsvToRgb(color.h, s, v);\n        ok = true;\n        format = \"hsv\";\n      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n        s = convertToPercentage(color.s);\n        l = convertToPercentage(color.l);\n        rgb = hslToRgb(color.h, s, l);\n        ok = true;\n        format = \"hsl\";\n      }\n      if (color.hasOwnProperty(\"a\")) {\n        a = color.a;\n      }\n    }\n    a = boundAlpha(a);\n    return {\n      ok: ok,\n      format: color.format || format,\n      r: Math.min(255, Math.max(rgb.r, 0)),\n      g: Math.min(255, Math.max(rgb.g, 0)),\n      b: Math.min(255, Math.max(rgb.b, 0)),\n      a: a\n    };\n  }\n\n  // Conversion Functions\n  // --------------------\n\n  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n  // `rgbToRgb`\n  // Handle bounds / percentage checking to conform to CSS color spec\n  // <http://www.w3.org/TR/css3-color/>\n  // *Assumes:* r, g, b in [0, 255] or [0, 1]\n  // *Returns:* { r, g, b } in [0, 255]\n  function rgbToRgb(r, g, b) {\n    return {\n      r: bound01(r, 255) * 255,\n      g: bound01(g, 255) * 255,\n      b: bound01(b, 255) * 255\n    };\n  }\n\n  // `rgbToHsl`\n  // Converts an RGB color value to HSL.\n  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n  // *Returns:* { h, s, l } in [0,1]\n  function rgbToHsl(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b),\n      min = Math.min(r, g, b);\n    var h,\n      s,\n      l = (max + min) / 2;\n    if (max == min) {\n      h = s = 0; // achromatic\n    } else {\n      var d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n        case g:\n          h = (b - r) / d + 2;\n          break;\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n      h /= 6;\n    }\n    return {\n      h: h,\n      s: s,\n      l: l\n    };\n  }\n\n  // `hslToRgb`\n  // Converts an HSL color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n  function hslToRgb(h, s, l) {\n    var r, g, b;\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n    function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    }\n    if (s === 0) {\n      r = g = b = l; // achromatic\n    } else {\n      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      var p = 2 * l - q;\n      r = hue2rgb(p, q, h + 1 / 3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1 / 3);\n    }\n    return {\n      r: r * 255,\n      g: g * 255,\n      b: b * 255\n    };\n  }\n\n  // `rgbToHsv`\n  // Converts an RGB color value to HSV\n  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n  // *Returns:* { h, s, v } in [0,1]\n  function rgbToHsv(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b),\n      min = Math.min(r, g, b);\n    var h,\n      s,\n      v = max;\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n    if (max == min) {\n      h = 0; // achromatic\n    } else {\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n        case g:\n          h = (b - r) / d + 2;\n          break;\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n      h /= 6;\n    }\n    return {\n      h: h,\n      s: s,\n      v: v\n    };\n  }\n\n  // `hsvToRgb`\n  // Converts an HSV color value to RGB.\n  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n  // *Returns:* { r, g, b } in the set [0, 255]\n  function hsvToRgb(h, s, v) {\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n    var i = Math.floor(h),\n      f = h - i,\n      p = v * (1 - s),\n      q = v * (1 - f * s),\n      t = v * (1 - (1 - f) * s),\n      mod = i % 6,\n      r = [v, q, p, p, t, v][mod],\n      g = [t, v, v, q, p, p][mod],\n      b = [p, p, t, v, v, q][mod];\n    return {\n      r: r * 255,\n      g: g * 255,\n      b: b * 255\n    };\n  }\n\n  // `rgbToHex`\n  // Converts an RGB color to hex\n  // Assumes r, g, and b are contained in the set [0, 255]\n  // Returns a 3 or 6 character hex\n  function rgbToHex(r, g, b, allow3Char) {\n    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n    return hex.join(\"\");\n  }\n\n  // `rgbaToHex`\n  // Converts an RGBA color plus alpha transparency to hex\n  // Assumes r, g, b are contained in the set [0, 255] and\n  // a in [0, 1]. Returns a 4 or 8 character rgba hex\n  function rgbaToHex(r, g, b, a, allow4Char) {\n    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n    return hex.join(\"\");\n  }\n\n  // `rgbaToArgbHex`\n  // Converts an RGBA color to an ARGB Hex8 string\n  // Rarely used, but required for \"toFilter()\"\n  function rgbaToArgbHex(r, g, b, a) {\n    var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];\n    return hex.join(\"\");\n  }\n\n  // `equals`\n  // Can be called with any tinycolor input\n  tinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) return false;\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n  };\n  tinycolor.random = function () {\n    return tinycolor.fromRatio({\n      r: Math.random(),\n      g: Math.random(),\n      b: Math.random()\n    });\n  };\n\n  // Modification Functions\n  // ----------------------\n  // Thanks to less.js for some of the basics here\n  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\n  function _desaturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n  function _saturate(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n  }\n  function _greyscale(color) {\n    return tinycolor(color).desaturate(100);\n  }\n  function _lighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  }\n  function _brighten(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n    return tinycolor(rgb);\n  }\n  function _darken(color, amount) {\n    amount = amount === 0 ? 0 : amount || 10;\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n  }\n\n  // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n  // Values outside of this range will be wrapped into this range.\n  function _spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n  }\n\n  // Combination Functions\n  // ---------------------\n  // Thanks to jQuery xColor for some of the ideas behind these\n  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\n  function _complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n  }\n  function polyad(color, number) {\n    if (isNaN(number) || number <= 0) {\n      throw new Error(\"Argument to polyad must be a positive number\");\n    }\n    var hsl = tinycolor(color).toHsl();\n    var result = [tinycolor(color)];\n    var step = 360 / number;\n    for (var i = 1; i < number; i++) {\n      result.push(tinycolor({\n        h: (hsl.h + i * step) % 360,\n        s: hsl.s,\n        l: hsl.l\n      }));\n    }\n    return result;\n  }\n  function _splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [tinycolor(color), tinycolor({\n      h: (h + 72) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), tinycolor({\n      h: (h + 216) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  }\n  function _analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {\n      hsl.h = (hsl.h + part) % 360;\n      ret.push(tinycolor(hsl));\n    }\n    return ret;\n  }\n  function _monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h,\n      s = hsv.s,\n      v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n    while (results--) {\n      ret.push(tinycolor({\n        h: h,\n        s: s,\n        v: v\n      }));\n      v = (v + modification) % 1;\n    }\n    return ret;\n  }\n\n  // Utility Functions\n  // ---------------------\n\n  tinycolor.mix = function (color1, color2, amount) {\n    amount = amount === 0 ? 0 : amount || 50;\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n    var p = amount / 100;\n    var rgba = {\n      r: (rgb2.r - rgb1.r) * p + rgb1.r,\n      g: (rgb2.g - rgb1.g) * p + rgb1.g,\n      b: (rgb2.b - rgb1.b) * p + rgb1.b,\n      a: (rgb2.a - rgb1.a) * p + rgb1.a\n    };\n    return tinycolor(rgba);\n  };\n\n  // Readability Functions\n  // ---------------------\n  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n  // `contrast`\n  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\n  tinycolor.readability = function (color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);\n  };\n\n  // `isReadable`\n  // Ensure that foreground and background color combinations meet WCAG2 guidelines.\n  // The third argument is an optional Object.\n  //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n  //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n  // If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n  // *Example*\n  //    tinycolor.isReadable(\"#000\", \"#111\") => false\n  //    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\n  tinycolor.isReadable = function (color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n    out = false;\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n      case \"AAsmall\":\n      case \"AAAlarge\":\n        out = readability >= 4.5;\n        break;\n      case \"AAlarge\":\n        out = readability >= 3;\n        break;\n      case \"AAAsmall\":\n        out = readability >= 7;\n        break;\n    }\n    return out;\n  };\n\n  // `mostReadable`\n  // Given a base color and a list of possible foreground or background\n  // colors for that base, returns the most readable color.\n  // Optionally returns Black or White if the most readable color is unreadable.\n  // *Example*\n  //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n  //    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n  //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n  //    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\n  tinycolor.mostReadable = function (baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors;\n    level = args.level;\n    size = args.size;\n    for (var i = 0; i < colorList.length; i++) {\n      readability = tinycolor.readability(baseColor, colorList[i]);\n      if (readability > bestScore) {\n        bestScore = readability;\n        bestColor = tinycolor(colorList[i]);\n      }\n    }\n    if (tinycolor.isReadable(baseColor, bestColor, {\n      level: level,\n      size: size\n    }) || !includeFallbackColors) {\n      return bestColor;\n    } else {\n      args.includeFallbackColors = false;\n      return tinycolor.mostReadable(baseColor, [\"#fff\", \"#000\"], args);\n    }\n  };\n\n  // Big List of Colors\n  // ------------------\n  // <https://www.w3.org/TR/css-color-4/#named-colors>\n  var names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n  };\n\n  // Make it easy to access colors via `hexNames[hex]`\n  var hexNames = tinycolor.hexNames = flip(names);\n\n  // Utilities\n  // ---------\n\n  // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\n  function flip(o) {\n    var flipped = {};\n    for (var i in o) {\n      if (o.hasOwnProperty(i)) {\n        flipped[o[i]] = i;\n      }\n    }\n    return flipped;\n  }\n\n  // Return a valid alpha value [0,1] with all invalid values being set to 1\n  function boundAlpha(a) {\n    a = parseFloat(a);\n    if (isNaN(a) || a < 0 || a > 1) {\n      a = 1;\n    }\n    return a;\n  }\n\n  // Take input from [0, n] and return it as [0, 1]\n  function bound01(n, max) {\n    if (isOnePointZero(n)) n = \"100%\";\n    var processPercent = isPercentage(n);\n    n = Math.min(max, Math.max(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n      n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if (Math.abs(n - max) < 0.000001) {\n      return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return n % max / parseFloat(max);\n  }\n\n  // Force a number between 0 and 1\n  function clamp01(val) {\n    return Math.min(1, Math.max(0, val));\n  }\n\n  // Parse a base-16 hex value into a base-10 integer\n  function parseIntFromHex(val) {\n    return parseInt(val, 16);\n  }\n\n  // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n  function isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf(\".\") != -1 && parseFloat(n) === 1;\n  }\n\n  // Check to see if string passed in is a percentage\n  function isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf(\"%\") != -1;\n  }\n\n  // Force a hex value to have 2 characters\n  function pad2(c) {\n    return c.length == 1 ? \"0\" + c : \"\" + c;\n  }\n\n  // Replace a decimal with it's percentage value\n  function convertToPercentage(n) {\n    if (n <= 1) {\n      n = n * 100 + \"%\";\n    }\n    return n;\n  }\n\n  // Converts a decimal to a hex value\n  function convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n  }\n  // Converts a hex value to a decimal\n  function convertHexToDecimal(h) {\n    return parseIntFromHex(h) / 255;\n  }\n  var matchers = function () {\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    return {\n      CSS_UNIT: new RegExp(CSS_UNIT),\n      rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n      rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n      hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n      hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n      hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n      hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n  }();\n\n  // `isValidCSSUnit`\n  // Take in a single string / number and check to see if it looks like a CSS unit\n  // (see `matchers` above for definition).\n  function isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n  }\n\n  // `stringInputToObject`\n  // Permissive string parsing.  Take in a number of formats, and output an object\n  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n  function stringInputToObject(color) {\n    color = color.replace(trimLeft, \"\").replace(trimRight, \"\").toLowerCase();\n    var named = false;\n    if (names[color]) {\n      color = names[color];\n      named = true;\n    } else if (color == \"transparent\") {\n      return {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 0,\n        format: \"name\"\n      };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if (match = matchers.rgb.exec(color)) {\n      return {\n        r: match[1],\n        g: match[2],\n        b: match[3]\n      };\n    }\n    if (match = matchers.rgba.exec(color)) {\n      return {\n        r: match[1],\n        g: match[2],\n        b: match[3],\n        a: match[4]\n      };\n    }\n    if (match = matchers.hsl.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        l: match[3]\n      };\n    }\n    if (match = matchers.hsla.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        l: match[3],\n        a: match[4]\n      };\n    }\n    if (match = matchers.hsv.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        v: match[3]\n      };\n    }\n    if (match = matchers.hsva.exec(color)) {\n      return {\n        h: match[1],\n        s: match[2],\n        v: match[3],\n        a: match[4]\n      };\n    }\n    if (match = matchers.hex8.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        a: convertHexToDecimal(match[4]),\n        format: named ? \"name\" : \"hex8\"\n      };\n    }\n    if (match = matchers.hex6.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1]),\n        g: parseIntFromHex(match[2]),\n        b: parseIntFromHex(match[3]),\n        format: named ? \"name\" : \"hex\"\n      };\n    }\n    if (match = matchers.hex4.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1] + \"\" + match[1]),\n        g: parseIntFromHex(match[2] + \"\" + match[2]),\n        b: parseIntFromHex(match[3] + \"\" + match[3]),\n        a: convertHexToDecimal(match[4] + \"\" + match[4]),\n        format: named ? \"name\" : \"hex8\"\n      };\n    }\n    if (match = matchers.hex3.exec(color)) {\n      return {\n        r: parseIntFromHex(match[1] + \"\" + match[1]),\n        g: parseIntFromHex(match[2] + \"\" + match[2]),\n        b: parseIntFromHex(match[3] + \"\" + match[3]),\n        format: named ? \"name\" : \"hex\"\n      };\n    }\n    return false;\n  }\n  function validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\n      level: \"AA\",\n      size: \"small\"\n    };\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n      level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n      size = \"small\";\n    }\n    return {\n      level: level,\n      size: size\n    };\n  }\n\n  return tinycolor;\n\n}));\n","import Visualizer from './visualizer.js';\nwindow.Veeze = new Visualizer();\n\nconst button = document.getElementById(\"trigger\");\nbutton.addEventListener(\"click\", () => Veeze.play(0));\nbutton.addEventListener(\"touchstart\", () => Veeze.play(0));\n\ndocument.querySelectorAll(\".js\").forEach(item => item.style.display = \"initial\");\n","import tinygradient from 'npm:tinygradient';\n\nclass Visualizer {\n\n  #isInited = false;\n  #timestamp = performance.now();\n\n  constructor({ audio, canvas } = {}) {\n    this.audioElement = audio ?? document.querySelector(\"audio\");\n    this.canvasElement = canvas ?? document.getElementById(\"yaebal\");\n\n    this.drawingType = \"Linear\"; // or \"Log\";\n    this.secondsToShow = 10;\n    this.stepsPerSecond = 24;\n    this.fftSize = 1024;\n    this.gradientOptions = [\n      {color: '#000', pos: 0},\n      {color: '#006', pos: 0.1},\n      {color: '#f0f', pos: 1}\n    ]\n\n    this.gradientValues = Visualizer.calculateGradient(this.gradientOptions);\n    this.canvas = Visualizer.initCanvas(this.canvasElement);\n    this.bufferCanvas = Visualizer.initCanvas(document.createElement(\"canvas\"));\n\n    this.canvasContext = this.canvas.getContext(\"2d\");\n    this.bufferCanvasContext = this.bufferCanvas.getContext(\"2d\");\n\n    // `stepHeight` compensates losses of FPS\n    this.stepHeight = Math.ceil(this.canvas.height / this.secondsToShow / this.stepsPerSecond);\n  }\n\n  static calculateGradient(gradientOptions) {\n    const gradient = tinygradient(...gradientOptions);\n    const gradientValues = [];\n    const byteLength = 256;\n    for (let i = 0; i < byteLength; i++) {\n      gradientValues[i] = gradient.rgbAt(i / byteLength);\n    }\n    return gradientValues;\n  }\n\n  static initCanvas(canvas) {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    return canvas;\n  }\n\n  initSong() {\n    if (this.#isInited) {\n      return true;\n    }\n    let\n      context,\n      source;\n    try {\n      window.AudioContext = window.AudioContext || window.webkitAudioContext;\n      context = new AudioContext();\n    } catch (e) {\n      return false;\n    }\n    source = context.createMediaElementSource(this.audioElement);\n    this.analyser = context.createAnalyser();\n    this.gainNode = context.createGain();\n\n    this.analyser.minDecibels = -84;\n    this.analyser.maxDecibels = -36;\n    //this.analyser.smoothingTimeConstant = 0.75;\n    this.analyser.fftSize = this.fftSize;\n\n    let bufferLength = Math.ceil(this.analyser.frequencyBinCount / 1.073); // cut upper frequencies\n    this.dataArray = new Uint8Array(bufferLength);\n\n    source.connect(this.analyser);\n    this.analyser.connect(this.gainNode);\n    this.gainNode.connect(context.destination);\n\n    if (this.drawingType.toLocaleLowerCase() === \"linear\") {\n      this.barWidth = Math.ceil(this.canvas.width / this.dataArray.length);\n    }\n\n    this.#isInited = true;\n    this.draw();\n    return true;\n  }\n\n  resetSong() {\n    return (this.audioElement.paused)\n      ? this.audioElement.play()\n      : this.audioElement.pause();\n  }\n\n  play(shouldBeMuted) {\n    this.audioElement.muted = false; // mute should be via gainNode\n    this.resetSong(this.audioElement);\n    this.initSong();\n    this.gainNode.gain.value = shouldBeMuted ? 0 : 1;\n    return true;\n  }\n\n  draw() {\n    this.analyser.getByteFrequencyData(this.dataArray);\n    this.drawCanvas(this.dataArray);\n    this.requestAnimationFrame(() => this.draw());\n  }\n\n  requestAnimationFrame(callback) {\n    const now = performance.now();\n    const ms = now - this.#timestamp;\n    this.#timestamp = now;\n    this.stepHeight = Math.ceil(this.canvas.height / this.secondsToShow / 1000 * ms);\n    setTimeout(callback, this.stepsPerSecond);\n  }\n\n  drawCanvas(dataArray) {\n    this.bufferCanvasContext.drawImage(this.canvas, 0, 0);\n    this.canvasContext.fillStyle = this.gradientValues[0];\n    this.canvasContext.fillRect(0, 0, this.canvas.width, this.stepHeight);\n    this.canvasContext.drawImage(this.bufferCanvas, 0, this.stepHeight);\n\n    return this[\"drawCanvas\" + this.drawingType](dataArray);\n  }\n\n  drawCanvasLinear(dataArray) {\n    for (let i = 0; i < dataArray.length; i++) {\n      if (!dataArray[i]) {\n        continue;\n      }\n      this.canvasContext.fillStyle = this.gradientValues[dataArray[i]];\n      this.canvasContext.fillRect(i * this.barWidth, 0, this.barWidth, this.stepHeight);\n    }\n  }\n\n  drawCanvasLog(dataArray) {\n    let x = 0;\n    let stepWidth = 0;\n\n    for (let i = 0; i < dataArray.length; i++) {\n      if (!dataArray[i]) {\n        continue;\n      }\n      this.canvasContext.fillStyle = this.gradientValues[dataArray[i]];\n      stepWidth = Math.ceil((Math.log(i+1) / Math.log(dataArray.length) * this.canvas.width) - x);\n      this.canvasContext.fillRect(x, 0, stepWidth, this.stepHeight);\n      x += stepWidth;\n    }\n  }\n\n}\n\nexport default Visualizer;\n","/*!\n * tinygradient (v1.1.5)\n * @copyright 2014-2021 Damien \"Mistic\" Sorel <contact@git.strangeplanet.fr>\n * @licence MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('tinycolor2')) :\n    typeof define === 'function' && define.amd ? define(['tinycolor2'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.tinygradient = factory(global.tinycolor));\n}(this, (function (tinycolor2) { 'use strict';\n\n    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n    var tinycolor2__default = /*#__PURE__*/_interopDefaultLegacy(tinycolor2);\n\n    /**\n     * @typedef {Object} TinyGradient.StopInput\n     * @property {ColorInput} color\n     * @property {number} pos\n     */\n\n    /**\n     * @typedef {Object} TinyGradient.StepValue\n     * @type {number} [r]\n     * @type {number} [g]\n     * @type {number} [b]\n     * @type {number} [h]\n     * @type {number} [s]\n     * @type {number} [v]\n     * @type {number} [a]\n     */\n\n    /**\n     * @type {StepValue}\n     */\n\n    var RGBA_MAX = {\n      r: 256,\n      g: 256,\n      b: 256,\n      a: 1\n    };\n    /**\n     * @type {StepValue}\n     */\n\n    var HSVA_MAX = {\n      h: 360,\n      s: 1,\n      v: 1,\n      a: 1\n    };\n    /**\n     * Linearly compute the step size between start and end (not normalized)\n     * @param {StepValue} start\n     * @param {StepValue} end\n     * @param {number} steps - number of desired steps\n     * @return {StepValue}\n     */\n\n    function stepize(start, end, steps) {\n      var step = {};\n\n      for (var k in start) {\n        if (start.hasOwnProperty(k)) {\n          step[k] = steps === 0 ? 0 : (end[k] - start[k]) / steps;\n        }\n      }\n\n      return step;\n    }\n    /**\n     * Compute the final step color\n     * @param {StepValue} step - from `stepize`\n     * @param {StepValue} start\n     * @param {number} i - color index\n     * @param {StepValue} max - rgba or hsva of maximum values for each channel\n     * @return {StepValue}\n     */\n\n\n    function interpolate(step, start, i, max) {\n      var color = {};\n\n      for (var k in start) {\n        if (start.hasOwnProperty(k)) {\n          color[k] = step[k] * i + start[k];\n          color[k] = color[k] < 0 ? color[k] + max[k] : max[k] !== 1 ? color[k] % max[k] : color[k];\n        }\n      }\n\n      return color;\n    }\n    /**\n     * Generate gradient with RGBa interpolation\n     * @param {StopInput} stop1\n     * @param {StopInput} stop2\n     * @param {number} steps\n     * @return {tinycolor[]} color1 included, color2 excluded\n     */\n\n\n    function interpolateRgb(stop1, stop2, steps) {\n      var start = stop1.color.toRgb();\n      var end = stop2.color.toRgb();\n      var step = stepize(start, end, steps);\n      var gradient = [stop1.color];\n\n      for (var i = 1; i < steps; i++) {\n        var color = interpolate(step, start, i, RGBA_MAX);\n        gradient.push(tinycolor2__default['default'](color));\n      }\n\n      return gradient;\n    }\n    /**\n     * Generate gradient with HSVa interpolation\n     * @param {StopInput} stop1\n     * @param {StopInput} stop2\n     * @param {number} steps\n     * @param {boolean|'long'|'short'} mode\n     * @return {tinycolor[]} color1 included, color2 excluded\n     */\n\n\n    function interpolateHsv(stop1, stop2, steps, mode) {\n      var start = stop1.color.toHsv();\n      var end = stop2.color.toHsv(); // rgb interpolation if one of the steps in grayscale\n\n      if (start.s === 0 || end.s === 0) {\n        return interpolateRgb(stop1, stop2, steps);\n      }\n\n      var trigonometric;\n\n      if (typeof mode === 'boolean') {\n        trigonometric = mode;\n      } else {\n        var trigShortest = start.h < end.h && end.h - start.h < 180 || start.h > end.h && start.h - end.h > 180;\n        trigonometric = mode === 'long' && trigShortest || mode === 'short' && !trigShortest;\n      }\n\n      var step = stepize(start, end, steps);\n      var gradient = [stop1.color]; // recompute hue\n\n      var diff;\n\n      if (start.h <= end.h && !trigonometric || start.h >= end.h && trigonometric) {\n        diff = end.h - start.h;\n      } else if (trigonometric) {\n        diff = 360 - end.h + start.h;\n      } else {\n        diff = 360 - start.h + end.h;\n      }\n\n      step.h = Math.pow(-1, trigonometric ? 1 : 0) * Math.abs(diff) / steps;\n\n      for (var i = 1; i < steps; i++) {\n        var color = interpolate(step, start, i, HSVA_MAX);\n        gradient.push(tinycolor2__default['default'](color));\n      }\n\n      return gradient;\n    }\n    /**\n     * Compute substeps between each stops\n     * @param {StopInput[]} stops\n     * @param {number} steps\n     * @return {number[]}\n     */\n\n\n    function computeSubsteps(stops, steps) {\n      var l = stops.length; // validation\n\n      steps = parseInt(steps, 10);\n\n      if (isNaN(steps) || steps < 2) {\n        throw new Error('Invalid number of steps (< 2)');\n      }\n\n      if (steps < l) {\n        throw new Error('Number of steps cannot be inferior to number of stops');\n      } // compute substeps from stop positions\n\n\n      var substeps = [];\n\n      for (var i = 1; i < l; i++) {\n        var step = (steps - 1) * (stops[i].pos - stops[i - 1].pos);\n        substeps.push(Math.max(1, Math.round(step)));\n      } // adjust number of steps\n\n\n      var totalSubsteps = 1;\n\n      for (var n = l - 1; n--;) {\n        totalSubsteps += substeps[n];\n      }\n\n      while (totalSubsteps !== steps) {\n        if (totalSubsteps < steps) {\n          var min = Math.min.apply(null, substeps);\n          substeps[substeps.indexOf(min)]++;\n          totalSubsteps++;\n        } else {\n          var max = Math.max.apply(null, substeps);\n          substeps[substeps.indexOf(max)]--;\n          totalSubsteps--;\n        }\n      }\n\n      return substeps;\n    }\n    /**\n     * Compute the color at a specific position\n     * @param {StopInput[]} stops\n     * @param {number} pos\n     * @param {string} method\n     * @param {StepValue} max\n     * @returns {tinycolor}\n     */\n\n\n    function computeAt(stops, pos, method, max) {\n      if (pos < 0 || pos > 1) {\n        throw new Error('Position must be between 0 and 1');\n      }\n\n      var start, end;\n\n      for (var i = 0, l = stops.length; i < l - 1; i++) {\n        if (pos >= stops[i].pos && pos < stops[i + 1].pos) {\n          start = stops[i];\n          end = stops[i + 1];\n          break;\n        }\n      }\n\n      if (!start) {\n        start = end = stops[stops.length - 1];\n      }\n\n      var step = stepize(start.color[method](), end.color[method](), (end.pos - start.pos) * 100);\n      var color = interpolate(step, start.color[method](), (pos - start.pos) * 100, max);\n      return tinycolor2__default['default'](color);\n    }\n\n    var TinyGradient = /*#__PURE__*/function () {\n      /**\n       * @param {StopInput[]|ColorInput[]} stops\n       * @returns {TinyGradient}\n       */\n      function TinyGradient(stops) {\n        // validation\n        if (stops.length < 2) {\n          throw new Error('Invalid number of stops (< 2)');\n        }\n\n        var havingPositions = stops[0].pos !== undefined;\n        var l = stops.length;\n        var p = -1;\n        var lastColorLess = false; // create tinycolor objects and clean positions\n\n        this.stops = stops.map(function (stop, i) {\n          var hasPosition = stop.pos !== undefined;\n\n          if (havingPositions ^ hasPosition) {\n            throw new Error('Cannot mix positionned and not posionned color stops');\n          }\n\n          if (hasPosition) {\n            var hasColor = stop.color !== undefined;\n\n            if (!hasColor && (lastColorLess || i === 0 || i === l - 1)) {\n              throw new Error('Cannot define two consecutive position-only stops');\n            }\n\n            lastColorLess = !hasColor;\n            stop = {\n              color: hasColor ? tinycolor2__default['default'](stop.color) : null,\n              colorLess: !hasColor,\n              pos: stop.pos\n            };\n\n            if (stop.pos < 0 || stop.pos > 1) {\n              throw new Error('Color stops positions must be between 0 and 1');\n            } else if (stop.pos < p) {\n              throw new Error('Color stops positions are not ordered');\n            }\n\n            p = stop.pos;\n          } else {\n            stop = {\n              color: tinycolor2__default['default'](stop.color !== undefined ? stop.color : stop),\n              pos: i / (l - 1)\n            };\n          }\n\n          return stop;\n        });\n\n        if (this.stops[0].pos !== 0) {\n          this.stops.unshift({\n            color: this.stops[0].color,\n            pos: 0\n          });\n          l++;\n        }\n\n        if (this.stops[l - 1].pos !== 1) {\n          this.stops.push({\n            color: this.stops[l - 1].color,\n            pos: 1\n          });\n        }\n      }\n      /**\n       * Return new instance with reversed stops\n       * @return {TinyGradient}\n       */\n\n\n      var _proto = TinyGradient.prototype;\n\n      _proto.reverse = function reverse() {\n        var stops = [];\n        this.stops.forEach(function (stop) {\n          stops.push({\n            color: stop.color,\n            pos: 1 - stop.pos\n          });\n        });\n        return new TinyGradient(stops.reverse());\n      }\n      /**\n       * Return new instance with looped stops\n       * @return {TinyGradient}\n       */\n      ;\n\n      _proto.loop = function loop() {\n        var stops1 = [];\n        var stops2 = [];\n        this.stops.forEach(function (stop) {\n          stops1.push({\n            color: stop.color,\n            pos: stop.pos / 2\n          });\n        });\n        this.stops.slice(0, -1).forEach(function (stop) {\n          stops2.push({\n            color: stop.color,\n            pos: 1 - stop.pos / 2\n          });\n        });\n        return new TinyGradient(stops1.concat(stops2.reverse()));\n      }\n      /**\n       * Generate gradient with RGBa interpolation\n       * @param {number} steps\n       * @return {tinycolor[]}\n       */\n      ;\n\n      _proto.rgb = function rgb(steps) {\n        var _this = this;\n\n        var substeps = computeSubsteps(this.stops, steps);\n        var gradient = [];\n        this.stops.forEach(function (stop, i) {\n          if (stop.colorLess) {\n            stop.color = interpolateRgb(_this.stops[i - 1], _this.stops[i + 1], 2)[1];\n          }\n        });\n\n        for (var i = 0, l = this.stops.length; i < l - 1; i++) {\n          var rgb = interpolateRgb(this.stops[i], this.stops[i + 1], substeps[i]);\n          gradient.splice.apply(gradient, [gradient.length, 0].concat(rgb));\n        }\n\n        gradient.push(this.stops[this.stops.length - 1].color);\n        return gradient;\n      }\n      /**\n       * Generate gradient with HSVa interpolation\n       * @param {number} steps\n       * @param {boolean|'long'|'short'} [mode=false]\n       *    - false to step in clockwise\n       *    - true to step in trigonometric order\n       *    - 'short' to use the shortest way\n       *    - 'long' to use the longest way\n       * @return {tinycolor[]}\n       */\n      ;\n\n      _proto.hsv = function hsv(steps, mode) {\n        var _this2 = this;\n\n        var substeps = computeSubsteps(this.stops, steps);\n        var gradient = [];\n        this.stops.forEach(function (stop, i) {\n          if (stop.colorLess) {\n            stop.color = interpolateHsv(_this2.stops[i - 1], _this2.stops[i + 1], 2, mode)[1];\n          }\n        });\n\n        for (var i = 0, l = this.stops.length; i < l - 1; i++) {\n          var hsv = interpolateHsv(this.stops[i], this.stops[i + 1], substeps[i], mode);\n          gradient.splice.apply(gradient, [gradient.length, 0].concat(hsv));\n        }\n\n        gradient.push(this.stops[this.stops.length - 1].color);\n        return gradient;\n      }\n      /**\n       * Generate CSS3 command (no prefix) for this gradient\n       * @param {String} [mode=linear] - 'linear' or 'radial'\n       * @param {String} [direction] - default is 'to right' or 'ellipse at center'\n       * @return {String}\n       */\n      ;\n\n      _proto.css = function css(mode, direction) {\n        mode = mode || 'linear';\n        direction = direction || (mode === 'linear' ? 'to right' : 'ellipse at center');\n        var css = mode + '-gradient(' + direction;\n        this.stops.forEach(function (stop) {\n          css += ', ' + (stop.colorLess ? '' : stop.color.toRgbString() + ' ') + stop.pos * 100 + '%';\n        });\n        css += ')';\n        return css;\n      }\n      /**\n       * Returns the color at specific position with RGBa interpolation\n       * @param {number} pos, between 0 and 1\n       * @return {tinycolor}\n       */\n      ;\n\n      _proto.rgbAt = function rgbAt(pos) {\n        return computeAt(this.stops, pos, 'toRgb', RGBA_MAX);\n      }\n      /**\n       * Returns the color at specific position with HSVa interpolation\n       * @param {number} pos, between 0 and 1\n       * @return {tinycolor}\n       */\n      ;\n\n      _proto.hsvAt = function hsvAt(pos) {\n        return computeAt(this.stops, pos, 'toHsv', HSVA_MAX);\n      };\n\n      return TinyGradient;\n    }();\n    /**\n     * @param {StopInput[]|ColorInput[]|StopInput...|ColorInput...} stops\n     * @returns {TinyGradient}\n     */\n\n\n    var tinygradient = function tinygradient(stops) {\n      // varargs\n      if (arguments.length === 1) {\n        if (!Array.isArray(arguments[0])) {\n          throw new Error('\"stops\" is not an array');\n        }\n\n        stops = arguments[0];\n      } else {\n        stops = Array.prototype.slice.call(arguments);\n      }\n\n      return new TinyGradient(stops);\n    };\n\n    return tinygradient;\n\n})));\n//# sourceMappingURL=browser.js.map\n","const tinycolor = require('tinycolor2');\n\n/**\n * @typedef {Object} TinyGradient.StopInput\n * @property {ColorInput} color\n * @property {number} pos\n */\n\n/**\n * @typedef {Object} TinyGradient.StepValue\n * @type {number} [r]\n * @type {number} [g]\n * @type {number} [b]\n * @type {number} [h]\n * @type {number} [s]\n * @type {number} [v]\n * @type {number} [a]\n */\n\n/**\n * @type {StepValue}\n */\nconst RGBA_MAX = { r: 256, g: 256, b: 256, a: 1 };\n\n/**\n * @type {StepValue}\n */\nconst HSVA_MAX = { h: 360, s: 1, v: 1, a: 1 };\n\n/**\n * Linearly compute the step size between start and end (not normalized)\n * @param {StepValue} start\n * @param {StepValue} end\n * @param {number} steps - number of desired steps\n * @return {StepValue}\n */\nfunction stepize(start, end, steps) {\n    let step = {};\n\n    for (let k in start) {\n        if (start.hasOwnProperty(k)) {\n            step[k] = steps === 0 ? 0 : (end[k] - start[k]) / steps;\n        }\n    }\n\n    return step;\n}\n\n/**\n * Compute the final step color\n * @param {StepValue} step - from `stepize`\n * @param {StepValue} start\n * @param {number} i - color index\n * @param {StepValue} max - rgba or hsva of maximum values for each channel\n * @return {StepValue}\n */\nfunction interpolate(step, start, i, max) {\n    let color = {};\n\n    for (let k in start) {\n        if (start.hasOwnProperty(k)) {\n            color[k] = step[k] * i + start[k];\n            color[k] = color[k] < 0 ? color[k] + max[k] : (max[k] !== 1 ? color[k] % max[k] : color[k]);\n        }\n    }\n\n    return color;\n}\n\n/**\n * Generate gradient with RGBa interpolation\n * @param {StopInput} stop1\n * @param {StopInput} stop2\n * @param {number} steps\n * @return {tinycolor[]} color1 included, color2 excluded\n */\nfunction interpolateRgb(stop1, stop2, steps) {\n    const start = stop1.color.toRgb();\n    const end = stop2.color.toRgb();\n    const step = stepize(start, end, steps);\n    let gradient = [stop1.color];\n\n    for (let i = 1; i < steps; i++) {\n        const color = interpolate(step, start, i, RGBA_MAX);\n        gradient.push(tinycolor(color));\n    }\n\n    return gradient;\n}\n\n/**\n * Generate gradient with HSVa interpolation\n * @param {StopInput} stop1\n * @param {StopInput} stop2\n * @param {number} steps\n * @param {boolean|'long'|'short'} mode\n * @return {tinycolor[]} color1 included, color2 excluded\n */\nfunction interpolateHsv(stop1, stop2, steps, mode) {\n    const start = stop1.color.toHsv();\n    const end = stop2.color.toHsv();\n\n    // rgb interpolation if one of the steps in grayscale\n    if (start.s === 0 || end.s === 0) {\n        return interpolateRgb(stop1, stop2, steps);\n    }\n\n    let trigonometric;\n    if (typeof mode === 'boolean') {\n        trigonometric = mode;\n    }\n    else {\n        const trigShortest = (start.h < end.h && end.h - start.h < 180) || (start.h > end.h && start.h - end.h > 180);\n        trigonometric = (mode === 'long' && trigShortest) || (mode === 'short' && !trigShortest);\n    }\n\n    const step = stepize(start, end, steps);\n    let gradient = [stop1.color];\n\n    // recompute hue\n    let diff;\n    if ((start.h <= end.h && !trigonometric) || (start.h >= end.h && trigonometric)) {\n        diff = end.h - start.h;\n    }\n    else if (trigonometric) {\n        diff = 360 - end.h + start.h;\n    }\n    else {\n        diff = 360 - start.h + end.h;\n    }\n    step.h = Math.pow(-1, trigonometric ? 1 : 0) * Math.abs(diff) / steps;\n\n    for (let i = 1; i < steps; i++) {\n        const color = interpolate(step, start, i, HSVA_MAX);\n        gradient.push(tinycolor(color));\n    }\n\n    return gradient;\n}\n\n/**\n * Compute substeps between each stops\n * @param {StopInput[]} stops\n * @param {number} steps\n * @return {number[]}\n */\nfunction computeSubsteps(stops, steps) {\n    const l = stops.length;\n\n    // validation\n    steps = parseInt(steps, 10);\n\n    if (isNaN(steps) || steps < 2) {\n        throw new Error('Invalid number of steps (< 2)');\n    }\n    if (steps < l) {\n        throw new Error('Number of steps cannot be inferior to number of stops');\n    }\n\n    // compute substeps from stop positions\n    let substeps = [];\n\n    for (let i = 1; i < l; i++) {\n        const step = (steps - 1) * (stops[i].pos - stops[i - 1].pos);\n        substeps.push(Math.max(1, Math.round(step)));\n    }\n\n    // adjust number of steps\n    let totalSubsteps = 1;\n    for (let n = l - 1; n--;) totalSubsteps += substeps[n];\n\n    while (totalSubsteps !== steps) {\n        if (totalSubsteps < steps) {\n            const min = Math.min.apply(null, substeps);\n            substeps[substeps.indexOf(min)]++;\n            totalSubsteps++;\n        }\n        else {\n            const max = Math.max.apply(null, substeps);\n            substeps[substeps.indexOf(max)]--;\n            totalSubsteps--;\n        }\n    }\n\n    return substeps;\n}\n\n/**\n * Compute the color at a specific position\n * @param {StopInput[]} stops\n * @param {number} pos\n * @param {string} method\n * @param {StepValue} max\n * @returns {tinycolor}\n */\nfunction computeAt(stops, pos, method, max) {\n    if (pos < 0 || pos > 1) {\n        throw new Error('Position must be between 0 and 1');\n    }\n\n    let start, end;\n    for (let i = 0, l = stops.length; i < l - 1; i++) {\n        if (pos >= stops[i].pos && pos < stops[i + 1].pos) {\n            start = stops[i];\n            end = stops[i + 1];\n            break;\n        }\n    }\n\n    if (!start) {\n        start = end = stops[stops.length - 1];\n    }\n\n    const step = stepize(start.color[method](), end.color[method](), (end.pos - start.pos) * 100);\n    const color = interpolate(step, start.color[method](), (pos - start.pos) * 100, max);\n    return tinycolor(color);\n}\n\nclass TinyGradient {\n    /**\n     * @param {StopInput[]|ColorInput[]} stops\n     * @returns {TinyGradient}\n     */\n    constructor(stops) {\n        // validation\n        if (stops.length < 2) {\n            throw new Error('Invalid number of stops (< 2)');\n        }\n\n        const havingPositions = stops[0].pos !== undefined;\n        let l = stops.length;\n        let p = -1;\n        let lastColorLess = false;\n        // create tinycolor objects and clean positions\n        this.stops = stops.map((stop, i) => {\n            const hasPosition = stop.pos !== undefined;\n            if (havingPositions ^ hasPosition) {\n                throw new Error('Cannot mix positionned and not posionned color stops');\n            }\n\n            if (hasPosition) {\n                const hasColor = stop.color !== undefined;\n                if (!hasColor && (lastColorLess || i === 0 || i === l - 1)) {\n                    throw new Error('Cannot define two consecutive position-only stops');\n                }\n                lastColorLess = !hasColor;\n\n                stop = {\n                    color    : hasColor ? tinycolor(stop.color) : null,\n                    colorLess: !hasColor,\n                    pos      : stop.pos\n                };\n\n                if (stop.pos < 0 || stop.pos > 1) {\n                    throw new Error('Color stops positions must be between 0 and 1');\n                }\n                else if (stop.pos < p) {\n                    throw new Error('Color stops positions are not ordered');\n                }\n                p = stop.pos;\n            }\n            else {\n                stop = {\n                    color: tinycolor(stop.color !== undefined ? stop.color : stop),\n                    pos  : i / (l - 1)\n                };\n            }\n\n            return stop;\n        });\n\n        if (this.stops[0].pos !== 0) {\n            this.stops.unshift({\n                color: this.stops[0].color,\n                pos  : 0\n            });\n            l++;\n        }\n        if (this.stops[l - 1].pos !== 1) {\n            this.stops.push({\n                color: this.stops[l - 1].color,\n                pos  : 1\n            });\n        }\n    }\n\n    /**\n     * Return new instance with reversed stops\n     * @return {TinyGradient}\n     */\n    reverse() {\n        let stops = [];\n\n        this.stops.forEach(function (stop) {\n            stops.push({\n                color: stop.color,\n                pos  : 1 - stop.pos\n            });\n        });\n\n        return new TinyGradient(stops.reverse());\n    }\n\n    /**\n     * Return new instance with looped stops\n     * @return {TinyGradient}\n     */\n    loop() {\n        let stops1 = [];\n        let stops2 = [];\n\n        this.stops.forEach((stop) => {\n            stops1.push({\n                color: stop.color,\n                pos  : stop.pos / 2\n            });\n        });\n\n        this.stops.slice(0, -1).forEach((stop) => {\n            stops2.push({\n                color: stop.color,\n                pos  : 1 - stop.pos / 2\n            });\n        });\n\n        return new TinyGradient(stops1.concat(stops2.reverse()));\n    }\n\n    /**\n     * Generate gradient with RGBa interpolation\n     * @param {number} steps\n     * @return {tinycolor[]}\n     */\n    rgb(steps) {\n        const substeps = computeSubsteps(this.stops, steps);\n        let gradient = [];\n\n        this.stops.forEach((stop, i) => {\n            if (stop.colorLess) {\n                stop.color = interpolateRgb(this.stops[i - 1], this.stops[i + 1], 2)[1];\n            }\n        });\n\n        for (let i = 0, l = this.stops.length; i < l - 1; i++) {\n            const rgb = interpolateRgb(this.stops[i], this.stops[i + 1], substeps[i]);\n            gradient.splice(gradient.length, 0, ...rgb);\n        }\n\n        gradient.push(this.stops[this.stops.length - 1].color);\n\n        return gradient;\n    }\n\n    /**\n     * Generate gradient with HSVa interpolation\n     * @param {number} steps\n     * @param {boolean|'long'|'short'} [mode=false]\n     *    - false to step in clockwise\n     *    - true to step in trigonometric order\n     *    - 'short' to use the shortest way\n     *    - 'long' to use the longest way\n     * @return {tinycolor[]}\n     */\n    hsv(steps, mode) {\n        const substeps = computeSubsteps(this.stops, steps);\n        let gradient = [];\n\n        this.stops.forEach((stop, i) => {\n            if (stop.colorLess) {\n                stop.color = interpolateHsv(this.stops[i - 1], this.stops[i + 1], 2, mode)[1];\n            }\n        });\n\n        for (let i = 0, l = this.stops.length; i < l - 1; i++) {\n            const hsv = interpolateHsv(this.stops[i], this.stops[i + 1], substeps[i], mode);\n            gradient.splice(gradient.length, 0, ...hsv);\n        }\n\n        gradient.push(this.stops[this.stops.length - 1].color);\n\n        return gradient;\n    }\n\n    /**\n     * Generate CSS3 command (no prefix) for this gradient\n     * @param {String} [mode=linear] - 'linear' or 'radial'\n     * @param {String} [direction] - default is 'to right' or 'ellipse at center'\n     * @return {String}\n     */\n    css(mode, direction) {\n        mode = mode || 'linear';\n        direction = direction || (mode === 'linear' ? 'to right' : 'ellipse at center');\n\n        let css = mode + '-gradient(' + direction;\n        this.stops.forEach(function (stop) {\n            css += ', ' + (stop.colorLess ? '' : stop.color.toRgbString() + ' ') + (stop.pos * 100) + '%';\n        });\n        css += ')';\n        return css;\n    }\n\n    /**\n     * Returns the color at specific position with RGBa interpolation\n     * @param {number} pos, between 0 and 1\n     * @return {tinycolor}\n     */\n    rgbAt(pos) {\n        return computeAt(this.stops, pos, 'toRgb', RGBA_MAX);\n    }\n\n    /**\n     * Returns the color at specific position with HSVa interpolation\n     * @param {number} pos, between 0 and 1\n     * @return {tinycolor}\n     */\n    hsvAt(pos) {\n        return computeAt(this.stops, pos, 'toHsv', HSVA_MAX);\n    }\n}\n\n/**\n * @param {StopInput[]|ColorInput[]|StopInput...|ColorInput...} stops\n * @returns {TinyGradient}\n */\nmodule.exports = function (stops) {\n    // varargs\n    if (arguments.length === 1) {\n        if (!Array.isArray(arguments[0])) {\n            throw new Error('\"stops\" is not an array');\n        }\n        stops = arguments[0];\n    }\n    else {\n        stops = Array.prototype.slice.call(arguments);\n    }\n\n    return new TinyGradient(stops);\n};\n"],"names":["$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","factory","_typeof","obj","Symbol","iterator","constructor","prototype","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","trimLeft","trimRight","tinycolor","color","opts","rgb","a","s","v","l","ok","format","r","g","b","h","i","f","p","q","t","mod","stringInputToObject","replace","toLowerCase","match","named","names","matchers","exec","rgba","hsl","hsla","hsv","hsva","hex8","parseIntFromHex","hex6","hex4","hex3","isValidCSSUnit","bound01","String","substr","convertToPercentage","Math","floor","hslToRgb","hue2rgb","hasOwnProperty","boundAlpha","min","max","_originalInput","_r","_g","_b","_a","_roundA","round","_format","_gradientType","gradientType","_ok","rgbToHsl","d","rgbToHsv","rgbToHex","allow3Char","hex","pad2","toString","charAt","join","rgbaToArgbHex","convertDecimalToHex","_desaturate","amount","toHsl","clamp01","_saturate","_greyscale","desaturate","_lighten","_brighten","toRgb","_darken","_spin","hue","_complement","polyad","number","isNaN","result","step","push","_splitcomplement","_analogous","results","slices","part","ret","_monochromatic","toHsv","modification","isDark","getBrightness","isLight","isValid","getOriginalInput","getFormat","getAlpha","getLuminance","RsRGB","GsRGB","BsRGB","pow","setAlpha","value","toHsvString","toHslString","toHex","toHexString","toHex8","allow4Char","toHex8String","toRgbString","toPercentageRgb","toPercentageRgbString","toName","hexNames","toFilter","secondColor","hex8String","secondHex8String","formatSet","formattedString","hasAlpha","clone","_applyModification","fn","args","apply","concat","slice","lighten","arguments","brighten","darken","saturate","greyscale","spin","_applyCombination","analogous","complement","monochromatic","splitcomplement","triad","tetrad","fromRatio","newColor","equals","color1","color2","random","mix","rgb1","rgb2","readability","c1","c2","isReadable","wcag2","parms","level","size","wcag2Parms","out","toUpperCase","mostReadable","baseColor","colorList","includeFallbackColors","bestColor","bestScore","length","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","flip","o","flipped","parseFloat","n","indexOf","processPercent","parseInt","abs","val","c","RegExp","$530f8f6e0a4be09f$exports","tinycolor2","tinycolor2__default","e","RGBA_MAX","HSVA_MAX","stepize","start","end","steps","k","interpolate","interpolateRgb","stop1","stop2","gradient","interpolateHsv","mode","trigonometric","diff","trigShortest","computeSubsteps","stops","substeps","pos","totalSubsteps","computeAt","method","TinyGradient","havingPositions","undefined","lastColorLess","map","stop","hasPosition","hasColor","colorLess","unshift","_proto","reverse","forEach","loop","stops1","stops2","_this","splice","_this2","css","direction","rgbAt","hsvAt","Array","isArray","$3ce70689152ac69f$var$Visualizer","isInited","timestamp","performance","now","audio","canvas","audioElement","document","querySelector","canvasElement","getElementById","drawingType","secondsToShow","stepsPerSecond","fftSize","gradientOptions","gradientValues","calculateGradient","initCanvas","bufferCanvas","createElement","canvasContext","getContext","bufferCanvasContext","stepHeight","ceil","height","__esModule","default","width","innerWidth","innerHeight","initSong","context","source","AudioContext","webkitAudioContext","createMediaElementSource","analyser","createAnalyser","gainNode","createGain","minDecibels","maxDecibels","bufferLength","frequencyBinCount","dataArray","Uint8Array","connect","destination","toLocaleLowerCase","barWidth","draw","resetSong","paused","play","pause","shouldBeMuted","muted","gain","getByteFrequencyData","drawCanvas","requestAnimationFrame","callback","ms","setTimeout","drawImage","fillStyle","fillRect","drawCanvasLinear","drawCanvasLog","x","stepWidth","log","Veeze","$93dbfaf2f7232013$var$button","addEventListener","querySelectorAll","item","style","display"],"version":3,"file":"index.en.a591978f.js.map"}